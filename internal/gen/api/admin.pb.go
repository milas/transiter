//*
//The admin API is a private API used to manage a running Transiter instance.
//It should generally be inaccessible from the internet as the API can be used to e.g.
//delete all of the transit systems that are installed.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/admin.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported log levels in Transiter.
type LogLevel int32

const (
	LogLevel_INFO  LogLevel = 0
	LogLevel_DEBUG LogLevel = 1
	LogLevel_WARN  LogLevel = 2
	LogLevel_ERROR LogLevel = 3
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "INFO",
		1: "DEBUG",
		2: "WARN",
		3: "ERROR",
	}
	LogLevel_value = map[string]int32{
		"INFO":  0,
		"DEBUG": 1,
		"WARN":  2,
		"ERROR": 3,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{0}
}

// Transiter runs a background task called the scheduler which performs feed updates automatically.
// A scheduling policy determines when the scheduler will perform feed updates for this feed.
type FeedConfig_SchedulingPolicy int32

const (
	// Use the default policy, which is PERIODIC for GTFS realtime feeds and DAILY for all other feeds.
	FeedConfig_DEFAULT FeedConfig_SchedulingPolicy = 0
	// Perform an update periodically, with the period specified in the `periodic_update_period_ms` field.
	FeedConfig_PERIODIC FeedConfig_SchedulingPolicy = 1
	// Perform an update once a day, with the time of day specified in the `daily_update_time` field.
	FeedConfig_DAILY FeedConfig_SchedulingPolicy = 2
	// Don't perform updates in the scheduler. Updates can always be triggered manually using the admin API.
	FeedConfig_NONE FeedConfig_SchedulingPolicy = 3
)

// Enum value maps for FeedConfig_SchedulingPolicy.
var (
	FeedConfig_SchedulingPolicy_name = map[int32]string{
		0: "DEFAULT",
		1: "PERIODIC",
		2: "DAILY",
		3: "NONE",
	}
	FeedConfig_SchedulingPolicy_value = map[string]int32{
		"DEFAULT":  0,
		"PERIODIC": 1,
		"DAILY":    2,
		"NONE":     3,
	}
)

func (x FeedConfig_SchedulingPolicy) Enum() *FeedConfig_SchedulingPolicy {
	p := new(FeedConfig_SchedulingPolicy)
	*p = x
	return p
}

func (x FeedConfig_SchedulingPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedConfig_SchedulingPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[1].Descriptor()
}

func (FeedConfig_SchedulingPolicy) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[1]
}

func (x FeedConfig_SchedulingPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedConfig_SchedulingPolicy.Descriptor instead.
func (FeedConfig_SchedulingPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 0}
}

// Supported GTFS realtime extensions.
type GtfsRealtimeOptions_Extension int32

const (
	GtfsRealtimeOptions_NO_EXTENSION GtfsRealtimeOptions_Extension = 0
	GtfsRealtimeOptions_NYCT_TRIPS   GtfsRealtimeOptions_Extension = 1
	GtfsRealtimeOptions_NYCT_ALERTS  GtfsRealtimeOptions_Extension = 2
)

// Enum value maps for GtfsRealtimeOptions_Extension.
var (
	GtfsRealtimeOptions_Extension_name = map[int32]string{
		0: "NO_EXTENSION",
		1: "NYCT_TRIPS",
		2: "NYCT_ALERTS",
	}
	GtfsRealtimeOptions_Extension_value = map[string]int32{
		"NO_EXTENSION": 0,
		"NYCT_TRIPS":   1,
		"NYCT_ALERTS":  2,
	}
)

func (x GtfsRealtimeOptions_Extension) Enum() *GtfsRealtimeOptions_Extension {
	p := new(GtfsRealtimeOptions_Extension)
	*p = x
	return p
}

func (x GtfsRealtimeOptions_Extension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtfsRealtimeOptions_Extension) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[2].Descriptor()
}

func (GtfsRealtimeOptions_Extension) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[2]
}

func (x GtfsRealtimeOptions_Extension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtfsRealtimeOptions_Extension.Descriptor instead.
func (GtfsRealtimeOptions_Extension) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 0}
}

// Available deduplication policies for elevator alerts.
type GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy int32

const (
	GtfsRealtimeOptions_NyctAlertsOptions_NO_DEDUPLICATION       GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 0
	GtfsRealtimeOptions_NyctAlertsOptions_DEDUPLICATE_IN_STATION GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 1
	GtfsRealtimeOptions_NyctAlertsOptions_DEDUPLICATE_IN_COMPLEX GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 2
)

// Enum value maps for GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy.
var (
	GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy_name = map[int32]string{
		0: "NO_DEDUPLICATION",
		1: "DEDUPLICATE_IN_STATION",
		2: "DEDUPLICATE_IN_COMPLEX",
	}
	GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy_value = map[string]int32{
		"NO_DEDUPLICATION":       0,
		"DEDUPLICATE_IN_STATION": 1,
		"DEDUPLICATE_IN_COMPLEX": 2,
	}
)

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Enum() *GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy {
	p := new(GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy)
	*p = x
	return p
}

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[3].Descriptor()
}

func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[3]
}

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy.Descriptor instead.
func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 1, 0}
}

// Source describes the possible sources for service maps.
type ServiceMapConfig_Source int32

const (
	// Build the service maps using the GTFS static data.
	ServiceMapConfig_STATIC ServiceMapConfig_Source = 0
	// Build the service maps using the GTFS realtime data.
	ServiceMapConfig_REALTIME ServiceMapConfig_Source = 1
)

// Enum value maps for ServiceMapConfig_Source.
var (
	ServiceMapConfig_Source_name = map[int32]string{
		0: "STATIC",
		1: "REALTIME",
	}
	ServiceMapConfig_Source_value = map[string]int32{
		"STATIC":   0,
		"REALTIME": 1,
	}
)

func (x ServiceMapConfig_Source) Enum() *ServiceMapConfig_Source {
	p := new(ServiceMapConfig_Source)
	*p = x
	return p
}

func (x ServiceMapConfig_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceMapConfig_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[4].Descriptor()
}

func (ServiceMapConfig_Source) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[4]
}

func (x ServiceMapConfig_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceMapConfig_Source.Descriptor instead.
func (ServiceMapConfig_Source) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9, 0}
}

// Status of a feed update.
type FeedUpdate_Status int32

const (
	// Unknown status.
	FeedUpdate_UNKNOWN FeedUpdate_Status = 0
	// Feed update is in progress. Currently this status never appears in the admin API, but is
	// added in case Transiter support async feed updates in the future.
	FeedUpdate_RUNNING FeedUpdate_Status = 1
	// Finished successfully.
	FeedUpdate_UPDATED FeedUpdate_Status = 2
	// The update was skipped because the downloaded data was identical to the data for the last successful update.
	FeedUpdate_SKIPPED FeedUpdate_Status = 3
	// Failed to download feed data.
	FeedUpdate_FAILED_DOWNLOAD_ERROR FeedUpdate_Status = 4
	// Feed data was empty.
	FeedUpdate_FAILED_EMPTY_FEED FeedUpdate_Status = 5
	// The feed configuration is invalid. This typically indicates a bug in Transiter because
	// the feed configuration is validated when the system is being installed.
	FeedUpdate_FAILED_INVALID_FEED_CONFIG FeedUpdate_Status = 6
	// Failed to parse the feed data.
	// This means the feed data was corrupted or otherwise invalid.
	FeedUpdate_FAILED_PARSE_ERROR FeedUpdate_Status = 8
	// Failed to update the database using the new feed data.
	// This typically indicates a bug in Transiter or a transient error connecting to the database.
	FeedUpdate_FAILED_UPDATE_ERROR FeedUpdate_Status = 9
	// An internal unspecified error occurred.
	FeedUpdate_FAILED_INTERNAL_ERROR FeedUpdate_Status = 10
	// The feed has an unknown type.
	FeedUpdate_FAILED_UNKNOWN_FEED_TYPE FeedUpdate_Status = 11
)

// Enum value maps for FeedUpdate_Status.
var (
	FeedUpdate_Status_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "RUNNING",
		2:  "UPDATED",
		3:  "SKIPPED",
		4:  "FAILED_DOWNLOAD_ERROR",
		5:  "FAILED_EMPTY_FEED",
		6:  "FAILED_INVALID_FEED_CONFIG",
		8:  "FAILED_PARSE_ERROR",
		9:  "FAILED_UPDATE_ERROR",
		10: "FAILED_INTERNAL_ERROR",
		11: "FAILED_UNKNOWN_FEED_TYPE",
	}
	FeedUpdate_Status_value = map[string]int32{
		"UNKNOWN":                    0,
		"RUNNING":                    1,
		"UPDATED":                    2,
		"SKIPPED":                    3,
		"FAILED_DOWNLOAD_ERROR":      4,
		"FAILED_EMPTY_FEED":          5,
		"FAILED_INVALID_FEED_CONFIG": 6,
		"FAILED_PARSE_ERROR":         8,
		"FAILED_UPDATE_ERROR":        9,
		"FAILED_INTERNAL_ERROR":      10,
		"FAILED_UNKNOWN_FEED_TYPE":   11,
	}
)

func (x FeedUpdate_Status) Enum() *FeedUpdate_Status {
	p := new(FeedUpdate_Status)
	*p = x
	return p
}

func (x FeedUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[5].Descriptor()
}

func (FeedUpdate_Status) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[5]
}

func (x FeedUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedUpdate_Status.Descriptor instead.
func (FeedUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{11, 0}
}

// Request payload for the get system config endpoint.
type GetSystemConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system whose config is to be retrieved.
	SystemId      string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSystemConfigRequest) Reset() {
	*x = GetSystemConfigRequest{}
	mi := &file_api_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemConfigRequest) ProtoMessage() {}

func (x *GetSystemConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSystemConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetSystemConfigRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

// Request payload for the install or update system endpoint.
type InstallOrUpdateSystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system to install or update.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*InstallOrUpdateSystemRequest_SystemConfig
	//	*InstallOrUpdateSystemRequest_YamlConfig
	Config isInstallOrUpdateSystemRequest_Config `protobuf_oneof:"config"`
	// If true, do not perform an update if the system already exists.
	InstallOnly   bool `protobuf:"varint,4,opt,name=install_only,json=installOnly,proto3" json:"install_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallOrUpdateSystemRequest) Reset() {
	*x = InstallOrUpdateSystemRequest{}
	mi := &file_api_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallOrUpdateSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemRequest) ProtoMessage() {}

func (x *InstallOrUpdateSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemRequest.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{1}
}

func (x *InstallOrUpdateSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *InstallOrUpdateSystemRequest) GetConfig() isInstallOrUpdateSystemRequest_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetSystemConfig() *SystemConfig {
	if x != nil {
		if x, ok := x.Config.(*InstallOrUpdateSystemRequest_SystemConfig); ok {
			return x.SystemConfig
		}
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetYamlConfig() *YamlConfig {
	if x != nil {
		if x, ok := x.Config.(*InstallOrUpdateSystemRequest_YamlConfig); ok {
			return x.YamlConfig
		}
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetInstallOnly() bool {
	if x != nil {
		return x.InstallOnly
	}
	return false
}

type isInstallOrUpdateSystemRequest_Config interface {
	isInstallOrUpdateSystemRequest_Config()
}

type InstallOrUpdateSystemRequest_SystemConfig struct {
	// Config for the system, in the form or a protobuf message.
	SystemConfig *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3,oneof"`
}

type InstallOrUpdateSystemRequest_YamlConfig struct {
	// Config for the system, in the form of a YAML file.
	YamlConfig *YamlConfig `protobuf:"bytes,3,opt,name=yaml_config,json=yamlConfig,proto3,oneof"`
}

func (*InstallOrUpdateSystemRequest_SystemConfig) isInstallOrUpdateSystemRequest_Config() {}

func (*InstallOrUpdateSystemRequest_YamlConfig) isInstallOrUpdateSystemRequest_Config() {}

// YamlConfig contains a Transiter system configuration in YAML format.
type YamlConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The YAML content.
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// Whether the config is a template. If true the config will first be processed
	// using Go's template library.
	IsTemplate bool `protobuf:"varint,3,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	// Arguments to pass to Go's template library if the config is a template.
	//
	// In general as much information as possible should be in the config itself.
	// The template args are intended for things like API keys which are secret
	// and/or different for each person that installs the system.
	TemplateArgs  map[string]string `protobuf:"bytes,4,rep,name=template_args,json=templateArgs,proto3" json:"template_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YamlConfig) Reset() {
	*x = YamlConfig{}
	mi := &file_api_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlConfig) ProtoMessage() {}

func (x *YamlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlConfig.ProtoReflect.Descriptor instead.
func (*YamlConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{2}
}

func (x *YamlConfig) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *YamlConfig) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *YamlConfig) GetTemplateArgs() map[string]string {
	if x != nil {
		return x.TemplateArgs
	}
	return nil
}

// Response payload for the install of update system endpoint.
type InstallOrUpdateSystemReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system that was installed.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// System configuration that was used for the install.
	// If the configuration was provided as a YAML file or a YAML template,
	// the value here represents the fully parsed and expanded configuration.
	SystemConfig  *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallOrUpdateSystemReply) Reset() {
	*x = InstallOrUpdateSystemReply{}
	mi := &file_api_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallOrUpdateSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemReply) ProtoMessage() {}

func (x *InstallOrUpdateSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemReply.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{3}
}

func (x *InstallOrUpdateSystemReply) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *InstallOrUpdateSystemReply) GetSystemConfig() *SystemConfig {
	if x != nil {
		return x.SystemConfig
	}
	return nil
}

// Request payload for the delete system endpoint.
type DeleteSystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system to delete.
	SystemId      string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSystemRequest) Reset() {
	*x = DeleteSystemRequest{}
	mi := &file_api_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemRequest) ProtoMessage() {}

func (x *DeleteSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

// Response payload for the delete system endpoint.
type DeleteSystemReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSystemReply) Reset() {
	*x = DeleteSystemReply{}
	mi := &file_api_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemReply) ProtoMessage() {}

func (x *DeleteSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemReply.ProtoReflect.Descriptor instead.
func (*DeleteSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{5}
}

// Configuration for a system.
type SystemConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the system.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration for the system's feeds.
	Feeds []*FeedConfig `protobuf:"bytes,2,rep,name=feeds,proto3" json:"feeds,omitempty"`
	// Configuration for the system's service maps.
	ServiceMaps   []*ServiceMapConfig `protobuf:"bytes,3,rep,name=service_maps,json=serviceMaps,proto3" json:"service_maps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	mi := &file_api_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{6}
}

func (x *SystemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemConfig) GetFeeds() []*FeedConfig {
	if x != nil {
		return x.Feeds
	}
	return nil
}

func (x *SystemConfig) GetServiceMaps() []*ServiceMapConfig {
	if x != nil {
		return x.ServiceMaps
	}
	return nil
}

// Configuration for a transit system data feed.
type FeedConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of this feed config.
	// This must be unique within the system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the feed.
	// Allowable values are `GTFS_STATIC`, `GTFS_REALTIME` and `NYCT_SUBWAY_CSV`.
	//
	// The are possible future plans to support plugging in additional custom types at build time.
	// This is why the field is a string and not an enum.
	Type string `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: use `type` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	Parser string `protobuf:"bytes,8,opt,name=parser,proto3" json:"parser,omitempty"`
	// Additional options GTFS realtime feeds.
	GtfsRealtimeOptions *GtfsRealtimeOptions `protobuf:"bytes,9,opt,name=gtfs_realtime_options,json=gtfsRealtimeOptions,proto3,oneof" json:"gtfs_realtime_options,omitempty"`
	// Required for install specifies whether an update should be performed for this feed during system install.
	// If true, an update is performed and if the update fails the installation fails.
	//
	// If unspecified, defaults to false for GTFS realtime feeds and true for all other
	// types of feeds.
	RequiredForInstall *bool `protobuf:"varint,2,opt,name=required_for_install,json=requiredForInstall,proto3,oneof" json:"required_for_install,omitempty"`
	// The scheduling policy to use for this feed.
	//
	// If unspecified, it takes the value `DEFAULT“.
	SchedulingPolicy FeedConfig_SchedulingPolicy `protobuf:"varint,14,opt,name=scheduling_policy,json=schedulingPolicy,proto3,enum=FeedConfig_SchedulingPolicy" json:"scheduling_policy,omitempty"`
	// Deprecated: use `scheduling_policy` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	UpdateStrategy FeedConfig_SchedulingPolicy `protobuf:"varint,3,opt,name=update_strategy,json=updateStrategy,proto3,enum=FeedConfig_SchedulingPolicy" json:"update_strategy,omitempty"`
	// For feeds with a `PERIODIC` scheduling policy, the update period.
	//
	// If unspecified, defaults to 5 seconds.
	PeriodicUpdatePeriodMs *int64 `protobuf:"varint,10,opt,name=periodic_update_period_ms,json=periodicUpdatePeriodMs,proto3,oneof" json:"periodic_update_period_ms,omitempty"`
	// Deprecated: use `periodic_update_period_ms` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	UpdatePeriodS *float64 `protobuf:"fixed64,4,opt,name=update_period_s,json=updatePeriodS,proto3,oneof" json:"update_period_s,omitempty"`
	// For feeds with a `DAILY` scheduling policy,
	// the time of day in the form HH:MM at which to perform an update.
	//
	// If unspecified, defaults to 03:00 for the first feed in the system, 03:10 for the second feed,
	// and so on.
	// The idea of the default is to run at night when the system is either quiet or not running.
	// The staggering is to avoid updates stepping on each other, and to spread out the load.
	DailyUpdateTime string `protobuf:"bytes,11,opt,name=daily_update_time,json=dailyUpdateTime,proto3" json:"daily_update_time,omitempty"`
	// For feeds with a `DAILY` scheduling policy,
	// the timezone for the time of day specified in the `daily_update_time`.
	//
	// If empty, a default is provided as follows.
	// The scheduler lists the agencies for the system in order of ID and uses
	// the first valid timezone it finds.
	// Given the GTFS static specification this should always work.
	// Moreover, all agencies should have the same timezone so listing in order of ID shouldn't matter.
	// But in reality it may not work.
	// If there is no valid agency timezones, the scheduler will log a warning and fall back to UTC.
	DailyUpdateTimezone string `protobuf:"bytes,12,opt,name=daily_update_timezone,json=dailyUpdateTimezone,proto3" json:"daily_update_timezone,omitempty"`
	// URL at which the feed can be downloaded using a HTTP GET request.
	// Transiter does not currently support non-GET requests.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Timeout to enforce for the request to the feed URL. If not specified, defaults to 5 seconds.
	RequestTimeoutMs *int64 `protobuf:"varint,6,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3,oneof" json:"request_timeout_ms,omitempty"`
	// HTTP headers to send in the request.
	HttpHeaders map[string]string `protobuf:"bytes,7,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional options for NYCT Subway feeds.
	NyctSubwayOptions *FeedConfig_NyctSubwayOptions `protobuf:"bytes,15,opt,name=nyct_subway_options,json=nyctSubwayOptions,proto3,oneof" json:"nyct_subway_options,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FeedConfig) Reset() {
	*x = FeedConfig{}
	mi := &file_api_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig) ProtoMessage() {}

func (x *FeedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig.ProtoReflect.Descriptor instead.
func (*FeedConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7}
}

func (x *FeedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetParser() string {
	if x != nil {
		return x.Parser
	}
	return ""
}

func (x *FeedConfig) GetGtfsRealtimeOptions() *GtfsRealtimeOptions {
	if x != nil {
		return x.GtfsRealtimeOptions
	}
	return nil
}

func (x *FeedConfig) GetRequiredForInstall() bool {
	if x != nil && x.RequiredForInstall != nil {
		return *x.RequiredForInstall
	}
	return false
}

func (x *FeedConfig) GetSchedulingPolicy() FeedConfig_SchedulingPolicy {
	if x != nil {
		return x.SchedulingPolicy
	}
	return FeedConfig_DEFAULT
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetUpdateStrategy() FeedConfig_SchedulingPolicy {
	if x != nil {
		return x.UpdateStrategy
	}
	return FeedConfig_DEFAULT
}

func (x *FeedConfig) GetPeriodicUpdatePeriodMs() int64 {
	if x != nil && x.PeriodicUpdatePeriodMs != nil {
		return *x.PeriodicUpdatePeriodMs
	}
	return 0
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetUpdatePeriodS() float64 {
	if x != nil && x.UpdatePeriodS != nil {
		return *x.UpdatePeriodS
	}
	return 0
}

func (x *FeedConfig) GetDailyUpdateTime() string {
	if x != nil {
		return x.DailyUpdateTime
	}
	return ""
}

func (x *FeedConfig) GetDailyUpdateTimezone() string {
	if x != nil {
		return x.DailyUpdateTimezone
	}
	return ""
}

func (x *FeedConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FeedConfig) GetRequestTimeoutMs() int64 {
	if x != nil && x.RequestTimeoutMs != nil {
		return *x.RequestTimeoutMs
	}
	return 0
}

func (x *FeedConfig) GetHttpHeaders() map[string]string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *FeedConfig) GetNyctSubwayOptions() *FeedConfig_NyctSubwayOptions {
	if x != nil {
		return x.NyctSubwayOptions
	}
	return nil
}

// Message describing additional options for the GTFS realtime feeds.
type GtfsRealtimeOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GTFS realtime extension to use.
	Extension GtfsRealtimeOptions_Extension `protobuf:"varint,1,opt,name=extension,proto3,enum=GtfsRealtimeOptions_Extension" json:"extension,omitempty"`
	// Options for the NYCT trips extension.
	// Ignored if the extension field is not `NYCT_TRIPS`.
	NyctTripsOptions *GtfsRealtimeOptions_NyctTripsOptions `protobuf:"bytes,2,opt,name=nyct_trips_options,json=nyctTripsOptions,proto3,oneof" json:"nyct_trips_options,omitempty"`
	// Options for the NYCT alerts extension.
	// Ignored if the extension field is not `NYCT_ALERTS`.
	NyctAlertsOptions *GtfsRealtimeOptions_NyctAlertsOptions `protobuf:"bytes,3,opt,name=nyct_alerts_options,json=nyctAlertsOptions,proto3,oneof" json:"nyct_alerts_options,omitempty"`
	// If true, stop sequences in the GTFS realtime feed data are ignored, and
	// alternative stop sequences are generated and assigned by Transiter.
	// This setting is designed for buggy GTFS realtime feeds in which
	// stop sequences (incorrectly) change between updates. In many cases
	// Transiter is able to generate stop sequences that are correct and
	// stable across updates.
	//
	// This should not be used for systems where a trip can call at the same
	// stop multiple times.
	ReassignStopSequences bool `protobuf:"varint,4,opt,name=reassign_stop_sequences,json=reassignStopSequences,proto3" json:"reassign_stop_sequences,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GtfsRealtimeOptions) Reset() {
	*x = GtfsRealtimeOptions{}
	mi := &file_api_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GtfsRealtimeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8}
}

func (x *GtfsRealtimeOptions) GetExtension() GtfsRealtimeOptions_Extension {
	if x != nil {
		return x.Extension
	}
	return GtfsRealtimeOptions_NO_EXTENSION
}

func (x *GtfsRealtimeOptions) GetNyctTripsOptions() *GtfsRealtimeOptions_NyctTripsOptions {
	if x != nil {
		return x.NyctTripsOptions
	}
	return nil
}

func (x *GtfsRealtimeOptions) GetNyctAlertsOptions() *GtfsRealtimeOptions_NyctAlertsOptions {
	if x != nil {
		return x.NyctAlertsOptions
	}
	return nil
}

func (x *GtfsRealtimeOptions) GetReassignStopSequences() bool {
	if x != nil {
		return x.ReassignStopSequences
	}
	return false
}

// Description of the configuration for a collection of service maps.
type ServiceMapConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of this service maps config.
	// This must be unique within the system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source of the service maps built using this config.
	Source ServiceMapConfig_Source `protobuf:"varint,2,opt,name=source,proto3,enum=ServiceMapConfig_Source" json:"source,omitempty"`
	// The threshold setting is used to exclude one-off trip schedules from service maps.
	// When calculating a service map, all trips are bucketed based on their schedule.
	// If the threshold is 0.2, trips are only included if the corresponding bucket contains
	// at least 20% of the trips. In particular, a one-off trip whose bucket only contains
	// itself will be excluded if there are many other trips.
	//
	// Note that a trip's schedule is reversed if needed based on the direction ID.
	Threshold float64 `protobuf:"fixed64,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Additional options relevant for static service maps only.
	StaticOptions *ServiceMapConfig_StaticOptions `protobuf:"bytes,4,opt,name=static_options,json=staticOptions,proto3,oneof" json:"static_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceMapConfig) Reset() {
	*x = ServiceMapConfig{}
	mi := &file_api_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig) ProtoMessage() {}

func (x *ServiceMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceMapConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceMapConfig) GetSource() ServiceMapConfig_Source {
	if x != nil {
		return x.Source
	}
	return ServiceMapConfig_STATIC
}

func (x *ServiceMapConfig) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ServiceMapConfig) GetStaticOptions() *ServiceMapConfig_StaticOptions {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

// Request payload for the update feed endpoint.
type UpdateFeedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system containing the feed to update.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// ID of the feed to update.
	FeedId string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// If true, a full feed update will be performed even if the downloaded data is identical
	// to the last update for this feed.
	Force         bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFeedRequest) Reset() {
	*x = UpdateFeedRequest{}
	mi := &file_api_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedRequest) ProtoMessage() {}

func (x *UpdateFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeedRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFeedRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *UpdateFeedRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *UpdateFeedRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Description of a feed update operation.
type FeedUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the feed update. This is a randomly generated UUID.
	// It can be used to find server logs for the update operation.
	UpdateId string `protobuf:"bytes,1,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
	// The feed configuration that was used to perform the feed update.
	FeedConfig *FeedConfig `protobuf:"bytes,27,opt,name=feed_config,json=feedConfig,proto3" json:"feed_config,omitempty"`
	// Unix timestamp of when the update started.
	StartedAtMs int64 `protobuf:"varint,4,opt,name=started_at_ms,json=startedAtMs,proto3" json:"started_at_ms,omitempty"`
	// Unix timestamp of when the update finished.
	// Only populated if the update is finished.
	FinishedAtMs *int64 `protobuf:"varint,6,opt,name=finished_at_ms,json=finishedAtMs,proto3,oneof" json:"finished_at_ms,omitempty"`
	// Total latency of the feed update, in milliseconds.
	TotalLatencyMs *int64 `protobuf:"varint,20,opt,name=total_latency_ms,json=totalLatencyMs,proto3,oneof" json:"total_latency_ms,omitempty"`
	// Latency of the HTTP request, in milliseconds.
	DownloadLatencyMs *int64 `protobuf:"varint,21,opt,name=download_latency_ms,json=downloadLatencyMs,proto3,oneof" json:"download_latency_ms,omitempty"`
	// Latency of parsing the downloaded data, in milliseconds.
	ParseLatencyMs *int64 `protobuf:"varint,22,opt,name=parse_latency_ms,json=parseLatencyMs,proto3,oneof" json:"parse_latency_ms,omitempty"`
	// Latency of updating the database with the parsed data, in milliseconds.
	DatabaseLatencyMs *int64 `protobuf:"varint,25,opt,name=database_latency_ms,json=databaseLatencyMs,proto3,oneof" json:"database_latency_ms,omitempty"`
	// Status code returned by the HTTP request.
	DownloadHttpStatusCode *int32 `protobuf:"varint,26,opt,name=download_http_status_code,json=downloadHttpStatusCode,proto3,oneof" json:"download_http_status_code,omitempty"`
	// Status of the update.
	Status FeedUpdate_Status `protobuf:"varint,7,opt,name=status,proto3,enum=FeedUpdate_Status" json:"status,omitempty"`
	// Number of bytes in the downloaded feed data.
	// Only populated if the update successfully downloaded data.
	ContentLength *int32 `protobuf:"varint,8,opt,name=content_length,json=contentLength,proto3,oneof" json:"content_length,omitempty"`
	// Hash of the downloaded feed data. This is used to skip updates
	// if the feed data hasn't changed.
	// Only populated if the update successfully downloaded data.
	ContentHash *string `protobuf:"bytes,9,opt,name=content_hash,json=contentHash,proto3,oneof" json:"content_hash,omitempty"`
	// Error message of the update.
	// Only populated if the update finished in an error
	ErrorMessage  *string `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedUpdate) Reset() {
	*x = FeedUpdate{}
	mi := &file_api_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdate) ProtoMessage() {}

func (x *FeedUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdate.ProtoReflect.Descriptor instead.
func (*FeedUpdate) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{11}
}

func (x *FeedUpdate) GetUpdateId() string {
	if x != nil {
		return x.UpdateId
	}
	return ""
}

func (x *FeedUpdate) GetFeedConfig() *FeedConfig {
	if x != nil {
		return x.FeedConfig
	}
	return nil
}

func (x *FeedUpdate) GetStartedAtMs() int64 {
	if x != nil {
		return x.StartedAtMs
	}
	return 0
}

func (x *FeedUpdate) GetFinishedAtMs() int64 {
	if x != nil && x.FinishedAtMs != nil {
		return *x.FinishedAtMs
	}
	return 0
}

func (x *FeedUpdate) GetTotalLatencyMs() int64 {
	if x != nil && x.TotalLatencyMs != nil {
		return *x.TotalLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDownloadLatencyMs() int64 {
	if x != nil && x.DownloadLatencyMs != nil {
		return *x.DownloadLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetParseLatencyMs() int64 {
	if x != nil && x.ParseLatencyMs != nil {
		return *x.ParseLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDatabaseLatencyMs() int64 {
	if x != nil && x.DatabaseLatencyMs != nil {
		return *x.DatabaseLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDownloadHttpStatusCode() int32 {
	if x != nil && x.DownloadHttpStatusCode != nil {
		return *x.DownloadHttpStatusCode
	}
	return 0
}

func (x *FeedUpdate) GetStatus() FeedUpdate_Status {
	if x != nil {
		return x.Status
	}
	return FeedUpdate_UNKNOWN
}

func (x *FeedUpdate) GetContentLength() int32 {
	if x != nil && x.ContentLength != nil {
		return *x.ContentLength
	}
	return 0
}

func (x *FeedUpdate) GetContentHash() string {
	if x != nil && x.ContentHash != nil {
		return *x.ContentHash
	}
	return ""
}

func (x *FeedUpdate) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

// Response payload for the update feed endpoint.
type UpdateFeedReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the feed update that was performed.
	FeedUpdate    *FeedUpdate `protobuf:"bytes,1,opt,name=feed_update,json=feedUpdate,proto3" json:"feed_update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFeedReply) Reset() {
	*x = UpdateFeedReply{}
	mi := &file_api_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFeedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedReply) ProtoMessage() {}

func (x *UpdateFeedReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedReply.ProtoReflect.Descriptor instead.
func (*UpdateFeedReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateFeedReply) GetFeedUpdate() *FeedUpdate {
	if x != nil {
		return x.FeedUpdate
	}
	return nil
}

// Request payload for the get scheduler status endpoint.
type GetSchedulerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulerStatusRequest) Reset() {
	*x = GetSchedulerStatusRequest{}
	mi := &file_api_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusRequest) ProtoMessage() {}

func (x *GetSchedulerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{13}
}

// Response payload for the get scheduler status endpoint.
type GetSchedulerStatusReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status for all feeds being updated by the scheduler.
	Feeds         []*GetSchedulerStatusReply_FeedStatus `protobuf:"bytes,1,rep,name=feeds,proto3" json:"feeds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulerStatusReply) Reset() {
	*x = GetSchedulerStatusReply{}
	mi := &file_api_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply) ProtoMessage() {}

func (x *GetSchedulerStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{14}
}

func (x *GetSchedulerStatusReply) GetFeeds() []*GetSchedulerStatusReply_FeedStatus {
	if x != nil {
		return x.Feeds
	}
	return nil
}

// Request payload for the reset scheduler endpoint.
type ResetSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetSchedulerRequest) Reset() {
	*x = ResetSchedulerRequest{}
	mi := &file_api_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerRequest) ProtoMessage() {}

func (x *ResetSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerRequest.ProtoReflect.Descriptor instead.
func (*ResetSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{15}
}

// Response payload for the reset scheduler endpoint.
type ResetSchedulerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetSchedulerReply) Reset() {
	*x = ResetSchedulerReply{}
	mi := &file_api_admin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetSchedulerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerReply) ProtoMessage() {}

func (x *ResetSchedulerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerReply.ProtoReflect.Descriptor instead.
func (*ResetSchedulerReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{16}
}

// Request payload for the get log level endpoint.
type GetLogLevelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogLevelRequest) Reset() {
	*x = GetLogLevelRequest{}
	mi := &file_api_admin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLevelRequest) ProtoMessage() {}

func (x *GetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*GetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{17}
}

// Response payload for the get log level endpoint.
type GetLogLevelReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current log level.
	LogLevel      LogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=LogLevel" json:"log_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogLevelReply) Reset() {
	*x = GetLogLevelReply{}
	mi := &file_api_admin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLevelReply) ProtoMessage() {}

func (x *GetLogLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLevelReply.ProtoReflect.Descriptor instead.
func (*GetLogLevelReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{18}
}

func (x *GetLogLevelReply) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_INFO
}

// Request payload for the set log level endpoint.
type SetLogLevelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// New log level.
	LogLevel      LogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=LogLevel" json:"log_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	mi := &file_api_admin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{19}
}

func (x *SetLogLevelRequest) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_INFO
}

// Response payload for the set log level endpoint.
type SetLogLevelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLogLevelReply) Reset() {
	*x = SetLogLevelReply{}
	mi := &file_api_admin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLogLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelReply) ProtoMessage() {}

func (x *SetLogLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelReply.ProtoReflect.Descriptor instead.
func (*SetLogLevelReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{20}
}

// Additional options for NYCT Subway CSV feeds.
type FeedConfig_NyctSubwayOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, infer the 'wheelchair_boarding' field from this feed.
	//
	// Historically, this information is not set in the NYC Subway GTFS feed, but
	// is included in the extended NYCT_SUBWAY_CSV feed.
	//
	// To use the data from the CSV feed, set thie field to true on that feed and
	// false on the GTFS static feed. If this field is not set on either feed,
	// the GTFS static feed will be used.
	//
	// Avoid setting this field to true on both feeds, as this will result in
	// non-deterministic behavior, since feed updates are not guaranteed to be ordered
	// after initial system installation.
	UseAccessibilityInfo bool `protobuf:"varint,1,opt,name=use_accessibility_info,json=useAccessibilityInfo,proto3" json:"use_accessibility_info,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FeedConfig_NyctSubwayOptions) Reset() {
	*x = FeedConfig_NyctSubwayOptions{}
	mi := &file_api_admin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedConfig_NyctSubwayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig_NyctSubwayOptions) ProtoMessage() {}

func (x *FeedConfig_NyctSubwayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig_NyctSubwayOptions.ProtoReflect.Descriptor instead.
func (*FeedConfig_NyctSubwayOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 1}
}

func (x *FeedConfig_NyctSubwayOptions) GetUseAccessibilityInfo() bool {
	if x != nil {
		return x.UseAccessibilityInfo
	}
	return false
}

// Options for the NYCT trips extension.
type GtfsRealtimeOptions_NyctTripsOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter out trips which are scheduled to run in the past but have no assigned trip and haven't started.
	FilterStaleUnassignedTrips bool `protobuf:"varint,1,opt,name=filter_stale_unassigned_trips,json=filterStaleUnassignedTrips,proto3" json:"filter_stale_unassigned_trips,omitempty"`
	// The raw MTA data has a bug in which the M train platforms are reported incorrectly for stations
	// in Williamsburg and Bushwick that the M shares with the J train. In the raw data, M trains going towards
	// the Williamsburg bridge stop at M11N, but J trains going towards the bridge stop at M11S. By default
	// this extension fixes these platforms for the M train, so M11N becomes M11S. This fix can be disabled
	// by setting this option to true.
	PreserveMTrainPlatformsInBushwick bool `protobuf:"varint,2,opt,name=preserve_m_train_platforms_in_bushwick,json=preserveMTrainPlatformsInBushwick,proto3" json:"preserve_m_train_platforms_in_bushwick,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) Reset() {
	*x = GtfsRealtimeOptions_NyctTripsOptions{}
	mi := &file_api_admin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions_NyctTripsOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions_NyctTripsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctTripsOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions_NyctTripsOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) GetFilterStaleUnassignedTrips() bool {
	if x != nil {
		return x.FilterStaleUnassignedTrips
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) GetPreserveMTrainPlatformsInBushwick() bool {
	if x != nil {
		return x.PreserveMTrainPlatformsInBushwick
	}
	return false
}

// Options for the NYCT alerts extension.
type GtfsRealtimeOptions_NyctAlertsOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deduplication policy for elevator alerts.
	ElevatorAlertsDeduplicationPolicy GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy `protobuf:"varint,1,opt,name=elevator_alerts_deduplication_policy,json=elevatorAlertsDeduplicationPolicy,proto3,enum=GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy" json:"elevator_alerts_deduplication_policy,omitempty"`
	// If true, the stop IDs in alerts will always be converted to point to stations.
	// E.g., if the alert is for the stop F20N (northbound F platform at Bergen St.)
	// it will be transformed to be for stop F20 (Bergen St. station).
	ElevatorAlertsInformUsingStationIds bool `protobuf:"varint,2,opt,name=elevator_alerts_inform_using_station_ids,json=elevatorAlertsInformUsingStationIds,proto3" json:"elevator_alerts_inform_using_station_ids,omitempty"`
	// When there are no trains running for a route due to the standard timetable (e.g., there are no C trains
	// overnight), the MTA publishes an alert. Arguably this is not really an alert because this information is
	// already in the timetable.
	// If true, these alerts are skipped.
	SkipTimetabledNoServiceAlerts bool `protobuf:"varint,3,opt,name=skip_timetabled_no_service_alerts,json=skipTimetabledNoServiceAlerts,proto3" json:"skip_timetabled_no_service_alerts,omitempty"`
	// The NYCT alerts extension contains many fields like "time alert created at" that don't map to fields in
	// the standard GTFS realtime protobuf. If true, these fields are put in a json blob and included as an
	// alert description.
	AddNyctMetadata bool `protobuf:"varint,4,opt,name=add_nyct_metadata,json=addNyctMetadata,proto3" json:"add_nyct_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) Reset() {
	*x = GtfsRealtimeOptions_NyctAlertsOptions{}
	mi := &file_api_admin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions_NyctAlertsOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctAlertsOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions_NyctAlertsOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 1}
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetElevatorAlertsDeduplicationPolicy() GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy {
	if x != nil {
		return x.ElevatorAlertsDeduplicationPolicy
	}
	return GtfsRealtimeOptions_NyctAlertsOptions_NO_DEDUPLICATION
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetElevatorAlertsInformUsingStationIds() bool {
	if x != nil {
		return x.ElevatorAlertsInformUsingStationIds
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetSkipTimetabledNoServiceAlerts() bool {
	if x != nil {
		return x.SkipTimetabledNoServiceAlerts
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetAddNyctMetadata() bool {
	if x != nil {
		return x.AddNyctMetadata
	}
	return false
}

// Description of options relevant for static service maps only.
type ServiceMapConfig_StaticOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If specified, only include trips that start earlier than this time.
	// The time is specified as a number of hours after midnight; i.e., 2:30am is '2.5'.
	StartsEarlierThan *float64 `protobuf:"fixed64,1,opt,name=starts_earlier_than,json=startsEarlierThan,proto3,oneof" json:"starts_earlier_than,omitempty"`
	// If specified, only include trips that start later than this time.
	StartsLaterThan *float64 `protobuf:"fixed64,2,opt,name=starts_later_than,json=startsLaterThan,proto3,oneof" json:"starts_later_than,omitempty"`
	// If specified, only include trips that end earlier than this time.
	EndsEarlierThan *float64 `protobuf:"fixed64,3,opt,name=ends_earlier_than,json=endsEarlierThan,proto3,oneof" json:"ends_earlier_than,omitempty"`
	// If specified, only include trips that end later than this time.
	EndsLaterThan *float64 `protobuf:"fixed64,4,opt,name=ends_later_than,json=endsLaterThan,proto3,oneof" json:"ends_later_than,omitempty"`
	// If specified, only include trips which run on at least one of the provided days.
	// If left empty, no trip filtering is provided.
	Days          []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceMapConfig_StaticOptions) Reset() {
	*x = ServiceMapConfig_StaticOptions{}
	mi := &file_api_admin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMapConfig_StaticOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig_StaticOptions) ProtoMessage() {}

func (x *ServiceMapConfig_StaticOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig_StaticOptions.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig_StaticOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ServiceMapConfig_StaticOptions) GetStartsEarlierThan() float64 {
	if x != nil && x.StartsEarlierThan != nil {
		return *x.StartsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetStartsLaterThan() float64 {
	if x != nil && x.StartsLaterThan != nil {
		return *x.StartsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetEndsEarlierThan() float64 {
	if x != nil && x.EndsEarlierThan != nil {
		return *x.EndsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetEndsLaterThan() float64 {
	if x != nil && x.EndsLaterThan != nil {
		return *x.EndsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

// Description of the status of one feed.
type GetSchedulerStatusReply_FeedStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the system this feed belongs to.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// Configuration of the feed as used by the scheduler.
	// If Postgres is manually updated to change the feed configuration,
	// this may be different what's in Postgres.
	// The scheduler needs to be updated in this case.
	// In general, however, the feed config here will match what's in Postgres.
	FeedConfig *FeedConfig `protobuf:"bytes,7,opt,name=feed_config,json=feedConfig,proto3" json:"feed_config,omitempty"`
	// Unix timestamp of the last successful feed update.
	LastSuccessfulUpdate int64 `protobuf:"varint,4,opt,name=last_successful_update,json=lastSuccessfulUpdate,proto3" json:"last_successful_update,omitempty"`
	// Unix timestamp of the last finished update.
	LastFinishedUpdate int64 `protobuf:"varint,5,opt,name=last_finished_update,json=lastFinishedUpdate,proto3" json:"last_finished_update,omitempty"`
	// Whether a feed update for this feed is currently running.
	CurrentlyRunning bool `protobuf:"varint,6,opt,name=currently_running,json=currentlyRunning,proto3" json:"currently_running,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetSchedulerStatusReply_FeedStatus) Reset() {
	*x = GetSchedulerStatusReply_FeedStatus{}
	mi := &file_api_admin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatusReply_FeedStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply_FeedStatus) ProtoMessage() {}

func (x *GetSchedulerStatusReply_FeedStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply_FeedStatus.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply_FeedStatus) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetSchedulerStatusReply_FeedStatus) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *GetSchedulerStatusReply_FeedStatus) GetFeedConfig() *FeedConfig {
	if x != nil {
		return x.FeedConfig
	}
	return nil
}

func (x *GetSchedulerStatusReply_FeedStatus) GetLastSuccessfulUpdate() int64 {
	if x != nil {
		return x.LastSuccessfulUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_FeedStatus) GetLastFinishedUpdate() int64 {
	if x != nil {
		return x.LastFinishedUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_FeedStatus) GetCurrentlyRunning() bool {
	if x != nil {
		return x.CurrentlyRunning
	}
	return false
}

var File_api_admin_proto protoreflect.FileDescriptor

const file_api_admin_proto_rawDesc = "" +
	"\n" +
	"\x0fapi/admin.proto\x1a\x1cgoogle/api/annotations.proto\"5\n" +
	"\x16GetSystemConfigRequest\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\"\xd4\x01\n" +
	"\x1cInstallOrUpdateSystemRequest\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\x124\n" +
	"\rsystem_config\x18\x02 \x01(\v2\r.SystemConfigH\x00R\fsystemConfig\x12.\n" +
	"\vyaml_config\x18\x03 \x01(\v2\v.YamlConfigH\x00R\n" +
	"yamlConfig\x12!\n" +
	"\finstall_only\x18\x04 \x01(\bR\vinstallOnlyB\b\n" +
	"\x06configJ\x04\b\x05\x10\x06\"\xd8\x01\n" +
	"\n" +
	"YamlConfig\x12\x18\n" +
	"\acontent\x18\x05 \x01(\tR\acontent\x12\x1f\n" +
	"\vis_template\x18\x03 \x01(\bR\n" +
	"isTemplate\x12B\n" +
	"\rtemplate_args\x18\x04 \x03(\v2\x1d.YamlConfig.TemplateArgsEntryR\ftemplateArgs\x1a?\n" +
	"\x11TemplateArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x01\x10\x02J\x04\b\x02\x10\x03\"m\n" +
	"\x1aInstallOrUpdateSystemReply\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\x122\n" +
	"\rsystem_config\x18\x02 \x01(\v2\r.SystemConfigR\fsystemConfig\"2\n" +
	"\x13DeleteSystemRequest\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\"\x13\n" +
	"\x11DeleteSystemReply\"{\n" +
	"\fSystemConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\x05feeds\x18\x02 \x03(\v2\v.FeedConfigR\x05feeds\x124\n" +
	"\fservice_maps\x18\x03 \x03(\v2\x11.ServiceMapConfigR\vserviceMaps\"\xf6\b\n" +
	"\n" +
	"FeedConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\r \x01(\tR\x04type\x12\x1a\n" +
	"\x06parser\x18\b \x01(\tB\x02\x18\x01R\x06parser\x12M\n" +
	"\x15gtfs_realtime_options\x18\t \x01(\v2\x14.GtfsRealtimeOptionsH\x00R\x13gtfsRealtimeOptions\x88\x01\x01\x125\n" +
	"\x14required_for_install\x18\x02 \x01(\bH\x01R\x12requiredForInstall\x88\x01\x01\x12I\n" +
	"\x11scheduling_policy\x18\x0e \x01(\x0e2\x1c.FeedConfig.SchedulingPolicyR\x10schedulingPolicy\x12I\n" +
	"\x0fupdate_strategy\x18\x03 \x01(\x0e2\x1c.FeedConfig.SchedulingPolicyB\x02\x18\x01R\x0eupdateStrategy\x12>\n" +
	"\x19periodic_update_period_ms\x18\n" +
	" \x01(\x03H\x02R\x16periodicUpdatePeriodMs\x88\x01\x01\x12/\n" +
	"\x0fupdate_period_s\x18\x04 \x01(\x01B\x02\x18\x01H\x03R\rupdatePeriodS\x88\x01\x01\x12*\n" +
	"\x11daily_update_time\x18\v \x01(\tR\x0fdailyUpdateTime\x122\n" +
	"\x15daily_update_timezone\x18\f \x01(\tR\x13dailyUpdateTimezone\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x121\n" +
	"\x12request_timeout_ms\x18\x06 \x01(\x03H\x04R\x10requestTimeoutMs\x88\x01\x01\x12?\n" +
	"\fhttp_headers\x18\a \x03(\v2\x1c.FeedConfig.HttpHeadersEntryR\vhttpHeaders\x12R\n" +
	"\x13nyct_subway_options\x18\x0f \x01(\v2\x1d.FeedConfig.NyctSubwayOptionsH\x05R\x11nyctSubwayOptions\x88\x01\x01\x1a>\n" +
	"\x10HttpHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aI\n" +
	"\x11NyctSubwayOptions\x124\n" +
	"\x16use_accessibility_info\x18\x01 \x01(\bR\x14useAccessibilityInfo\"B\n" +
	"\x10SchedulingPolicy\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\f\n" +
	"\bPERIODIC\x10\x01\x12\t\n" +
	"\x05DAILY\x10\x02\x12\b\n" +
	"\x04NONE\x10\x03B\x18\n" +
	"\x16_gtfs_realtime_optionsB\x17\n" +
	"\x15_required_for_installB\x1c\n" +
	"\x1a_periodic_update_period_msB\x12\n" +
	"\x10_update_period_sB\x15\n" +
	"\x13_request_timeout_msB\x16\n" +
	"\x14_nyct_subway_options\"\xce\b\n" +
	"\x13GtfsRealtimeOptions\x12<\n" +
	"\textension\x18\x01 \x01(\x0e2\x1e.GtfsRealtimeOptions.ExtensionR\textension\x12X\n" +
	"\x12nyct_trips_options\x18\x02 \x01(\v2%.GtfsRealtimeOptions.NyctTripsOptionsH\x00R\x10nyctTripsOptions\x88\x01\x01\x12[\n" +
	"\x13nyct_alerts_options\x18\x03 \x01(\v2&.GtfsRealtimeOptions.NyctAlertsOptionsH\x01R\x11nyctAlertsOptions\x88\x01\x01\x126\n" +
	"\x17reassign_stop_sequences\x18\x04 \x01(\bR\x15reassignStopSequences\x1a\xa8\x01\n" +
	"\x10NyctTripsOptions\x12A\n" +
	"\x1dfilter_stale_unassigned_trips\x18\x01 \x01(\bR\x1afilterStaleUnassignedTrips\x12Q\n" +
	"&preserve_m_train_platforms_in_bushwick\x18\x02 \x01(\bR!preserveMTrainPlatformsInBushwick\x1a\xef\x03\n" +
	"\x11NyctAlertsOptions\x12\x99\x01\n" +
	"$elevator_alerts_deduplication_policy\x18\x01 \x01(\x0e2H.GtfsRealtimeOptions.NyctAlertsOptions.ElevatorAlertsDeduplicationPolicyR!elevatorAlertsDeduplicationPolicy\x12U\n" +
	"(elevator_alerts_inform_using_station_ids\x18\x02 \x01(\bR#elevatorAlertsInformUsingStationIds\x12H\n" +
	"!skip_timetabled_no_service_alerts\x18\x03 \x01(\bR\x1dskipTimetabledNoServiceAlerts\x12*\n" +
	"\x11add_nyct_metadata\x18\x04 \x01(\bR\x0faddNyctMetadata\"q\n" +
	"!ElevatorAlertsDeduplicationPolicy\x12\x14\n" +
	"\x10NO_DEDUPLICATION\x10\x00\x12\x1a\n" +
	"\x16DEDUPLICATE_IN_STATION\x10\x01\x12\x1a\n" +
	"\x16DEDUPLICATE_IN_COMPLEX\x10\x02\">\n" +
	"\tExtension\x12\x10\n" +
	"\fNO_EXTENSION\x10\x00\x12\x0e\n" +
	"\n" +
	"NYCT_TRIPS\x10\x01\x12\x0f\n" +
	"\vNYCT_ALERTS\x10\x02B\x15\n" +
	"\x13_nyct_trips_optionsB\x16\n" +
	"\x14_nyct_alerts_options\"\xb8\x04\n" +
	"\x10ServiceMapConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x120\n" +
	"\x06source\x18\x02 \x01(\x0e2\x18.ServiceMapConfig.SourceR\x06source\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\x01R\tthreshold\x12K\n" +
	"\x0estatic_options\x18\x04 \x01(\v2\x1f.ServiceMapConfig.StaticOptionsH\x00R\rstaticOptions\x88\x01\x01\x1a\xbf\x02\n" +
	"\rStaticOptions\x123\n" +
	"\x13starts_earlier_than\x18\x01 \x01(\x01H\x00R\x11startsEarlierThan\x88\x01\x01\x12/\n" +
	"\x11starts_later_than\x18\x02 \x01(\x01H\x01R\x0fstartsLaterThan\x88\x01\x01\x12/\n" +
	"\x11ends_earlier_than\x18\x03 \x01(\x01H\x02R\x0fendsEarlierThan\x88\x01\x01\x12+\n" +
	"\x0fends_later_than\x18\x04 \x01(\x01H\x03R\rendsLaterThan\x88\x01\x01\x12\x12\n" +
	"\x04days\x18\x05 \x03(\tR\x04daysB\x16\n" +
	"\x14_starts_earlier_thanB\x14\n" +
	"\x12_starts_later_thanB\x14\n" +
	"\x12_ends_earlier_thanB\x12\n" +
	"\x10_ends_later_than\"\"\n" +
	"\x06Source\x12\n" +
	"\n" +
	"\x06STATIC\x10\x00\x12\f\n" +
	"\bREALTIME\x10\x01B\x11\n" +
	"\x0f_static_options\"_\n" +
	"\x11UpdateFeedRequest\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\x12\x17\n" +
	"\afeed_id\x18\x02 \x01(\tR\x06feedId\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\"\x94\b\n" +
	"\n" +
	"FeedUpdate\x12\x1b\n" +
	"\tupdate_id\x18\x01 \x01(\tR\bupdateId\x12,\n" +
	"\vfeed_config\x18\x1b \x01(\v2\v.FeedConfigR\n" +
	"feedConfig\x12\"\n" +
	"\rstarted_at_ms\x18\x04 \x01(\x03R\vstartedAtMs\x12)\n" +
	"\x0efinished_at_ms\x18\x06 \x01(\x03H\x00R\ffinishedAtMs\x88\x01\x01\x12-\n" +
	"\x10total_latency_ms\x18\x14 \x01(\x03H\x01R\x0etotalLatencyMs\x88\x01\x01\x123\n" +
	"\x13download_latency_ms\x18\x15 \x01(\x03H\x02R\x11downloadLatencyMs\x88\x01\x01\x12-\n" +
	"\x10parse_latency_ms\x18\x16 \x01(\x03H\x03R\x0eparseLatencyMs\x88\x01\x01\x123\n" +
	"\x13database_latency_ms\x18\x19 \x01(\x03H\x04R\x11databaseLatencyMs\x88\x01\x01\x12>\n" +
	"\x19download_http_status_code\x18\x1a \x01(\x05H\x05R\x16downloadHttpStatusCode\x88\x01\x01\x12*\n" +
	"\x06status\x18\a \x01(\x0e2\x12.FeedUpdate.StatusR\x06status\x12*\n" +
	"\x0econtent_length\x18\b \x01(\x05H\x06R\rcontentLength\x88\x01\x01\x12&\n" +
	"\fcontent_hash\x18\t \x01(\tH\aR\vcontentHash\x88\x01\x01\x12(\n" +
	"\rerror_message\x18\n" +
	" \x01(\tH\bR\ferrorMessage\x88\x01\x01\"\xf8\x01\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\v\n" +
	"\aUPDATED\x10\x02\x12\v\n" +
	"\aSKIPPED\x10\x03\x12\x19\n" +
	"\x15FAILED_DOWNLOAD_ERROR\x10\x04\x12\x15\n" +
	"\x11FAILED_EMPTY_FEED\x10\x05\x12\x1e\n" +
	"\x1aFAILED_INVALID_FEED_CONFIG\x10\x06\x12\x16\n" +
	"\x12FAILED_PARSE_ERROR\x10\b\x12\x17\n" +
	"\x13FAILED_UPDATE_ERROR\x10\t\x12\x19\n" +
	"\x15FAILED_INTERNAL_ERROR\x10\n" +
	"\x12\x1c\n" +
	"\x18FAILED_UNKNOWN_FEED_TYPE\x10\vB\x11\n" +
	"\x0f_finished_at_msB\x13\n" +
	"\x11_total_latency_msB\x16\n" +
	"\x14_download_latency_msB\x13\n" +
	"\x11_parse_latency_msB\x16\n" +
	"\x14_database_latency_msB\x1c\n" +
	"\x1a_download_http_status_codeB\x11\n" +
	"\x0f_content_lengthB\x0f\n" +
	"\r_content_hashB\x10\n" +
	"\x0e_error_message\"?\n" +
	"\x0fUpdateFeedReply\x12,\n" +
	"\vfeed_update\x18\x01 \x01(\v2\v.FeedUpdateR\n" +
	"feedUpdate\"\x1b\n" +
	"\x19GetSchedulerStatusRequest\"\xc3\x02\n" +
	"\x17GetSchedulerStatusReply\x129\n" +
	"\x05feeds\x18\x01 \x03(\v2#.GetSchedulerStatusReply.FeedStatusR\x05feeds\x1a\xec\x01\n" +
	"\n" +
	"FeedStatus\x12\x1b\n" +
	"\tsystem_id\x18\x01 \x01(\tR\bsystemId\x12,\n" +
	"\vfeed_config\x18\a \x01(\v2\v.FeedConfigR\n" +
	"feedConfig\x124\n" +
	"\x16last_successful_update\x18\x04 \x01(\x03R\x14lastSuccessfulUpdate\x120\n" +
	"\x14last_finished_update\x18\x05 \x01(\x03R\x12lastFinishedUpdate\x12+\n" +
	"\x11currently_running\x18\x06 \x01(\bR\x10currentlyRunning\"\x17\n" +
	"\x15ResetSchedulerRequest\"\x15\n" +
	"\x13ResetSchedulerReply\"\x14\n" +
	"\x12GetLogLevelRequest\"@\n" +
	"\x10GetLogLevelReply\x12&\n" +
	"\tlog_level\x18\x02 \x01(\x0e2\t.LogLevelR\blogLevelJ\x04\b\x01\x10\x02\"B\n" +
	"\x12SetLogLevelRequest\x12&\n" +
	"\tlog_level\x18\x02 \x01(\x0e2\t.LogLevelR\blogLevelJ\x04\b\x01\x10\x02\"\x12\n" +
	"\x10SetLogLevelReply*4\n" +
	"\bLogLevel\x12\b\n" +
	"\x04INFO\x10\x00\x12\t\n" +
	"\x05DEBUG\x10\x01\x12\b\n" +
	"\x04WARN\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x032\xdf\x05\n" +
	"\x05Admin\x12^\n" +
	"\x0fGetSystemConfig\x12\x17.GetSystemConfigRequest\x1a\r.SystemConfig\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/systems/{system_id}/config\x12t\n" +
	"\x15InstallOrUpdateSystem\x12\x1d.InstallOrUpdateSystemRequest\x1a\x1b.InstallOrUpdateSystemReply\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\x1a\x14/systems/{system_id}\x12V\n" +
	"\fDeleteSystem\x12\x14.DeleteSystemRequest\x1a\x12.DeleteSystemReply\"\x1c\x82\xd3\xe4\x93\x02\x16*\x14/systems/{system_id}\x12`\n" +
	"\n" +
	"UpdateFeed\x12\x12.UpdateFeedRequest\x1a\x10.UpdateFeedReply\",\x82\xd3\xe4\x93\x02&\"$/systems/{system_id}/feeds/{feed_id}\x12^\n" +
	"\x12GetSchedulerStatus\x12\x1a.GetSchedulerStatusRequest\x1a\x18.GetSchedulerStatusReply\"\x12\x82\xd3\xe4\x93\x02\f\x12\n" +
	"/scheduler\x12R\n" +
	"\x0eResetScheduler\x12\x16.ResetSchedulerRequest\x1a\x14.ResetSchedulerReply\"\x12\x82\xd3\xe4\x93\x02\f\"\n" +
	"/scheduler\x12H\n" +
	"\vGetLogLevel\x12\x13.GetLogLevelRequest\x1a\x11.GetLogLevelReply\"\x11\x82\xd3\xe4\x93\x02\v\x12\t/loglevel\x12H\n" +
	"\vSetLogLevel\x12\x13.SetLogLevelRequest\x1a\x11.SetLogLevelReply\"\x11\x82\xd3\xe4\x93\x02\v\x1a\t/loglevelBCB\n" +
	"AdminProtoP\x01Z3github.com/jamespfennell/transiter/internal/gen/apib\x06proto3"

var (
	file_api_admin_proto_rawDescOnce sync.Once
	file_api_admin_proto_rawDescData []byte
)

func file_api_admin_proto_rawDescGZIP() []byte {
	file_api_admin_proto_rawDescOnce.Do(func() {
		file_api_admin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_admin_proto_rawDesc), len(file_api_admin_proto_rawDesc)))
	})
	return file_api_admin_proto_rawDescData
}

var file_api_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_api_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_api_admin_proto_goTypes = []any{
	(LogLevel)(0),                      // 0: LogLevel
	(FeedConfig_SchedulingPolicy)(0),   // 1: FeedConfig.SchedulingPolicy
	(GtfsRealtimeOptions_Extension)(0), // 2: GtfsRealtimeOptions.Extension
	(GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy)(0), // 3: GtfsRealtimeOptions.NyctAlertsOptions.ElevatorAlertsDeduplicationPolicy
	(ServiceMapConfig_Source)(0),                  // 4: ServiceMapConfig.Source
	(FeedUpdate_Status)(0),                        // 5: FeedUpdate.Status
	(*GetSystemConfigRequest)(nil),                // 6: GetSystemConfigRequest
	(*InstallOrUpdateSystemRequest)(nil),          // 7: InstallOrUpdateSystemRequest
	(*YamlConfig)(nil),                            // 8: YamlConfig
	(*InstallOrUpdateSystemReply)(nil),            // 9: InstallOrUpdateSystemReply
	(*DeleteSystemRequest)(nil),                   // 10: DeleteSystemRequest
	(*DeleteSystemReply)(nil),                     // 11: DeleteSystemReply
	(*SystemConfig)(nil),                          // 12: SystemConfig
	(*FeedConfig)(nil),                            // 13: FeedConfig
	(*GtfsRealtimeOptions)(nil),                   // 14: GtfsRealtimeOptions
	(*ServiceMapConfig)(nil),                      // 15: ServiceMapConfig
	(*UpdateFeedRequest)(nil),                     // 16: UpdateFeedRequest
	(*FeedUpdate)(nil),                            // 17: FeedUpdate
	(*UpdateFeedReply)(nil),                       // 18: UpdateFeedReply
	(*GetSchedulerStatusRequest)(nil),             // 19: GetSchedulerStatusRequest
	(*GetSchedulerStatusReply)(nil),               // 20: GetSchedulerStatusReply
	(*ResetSchedulerRequest)(nil),                 // 21: ResetSchedulerRequest
	(*ResetSchedulerReply)(nil),                   // 22: ResetSchedulerReply
	(*GetLogLevelRequest)(nil),                    // 23: GetLogLevelRequest
	(*GetLogLevelReply)(nil),                      // 24: GetLogLevelReply
	(*SetLogLevelRequest)(nil),                    // 25: SetLogLevelRequest
	(*SetLogLevelReply)(nil),                      // 26: SetLogLevelReply
	nil,                                           // 27: YamlConfig.TemplateArgsEntry
	nil,                                           // 28: FeedConfig.HttpHeadersEntry
	(*FeedConfig_NyctSubwayOptions)(nil),          // 29: FeedConfig.NyctSubwayOptions
	(*GtfsRealtimeOptions_NyctTripsOptions)(nil),  // 30: GtfsRealtimeOptions.NyctTripsOptions
	(*GtfsRealtimeOptions_NyctAlertsOptions)(nil), // 31: GtfsRealtimeOptions.NyctAlertsOptions
	(*ServiceMapConfig_StaticOptions)(nil),        // 32: ServiceMapConfig.StaticOptions
	(*GetSchedulerStatusReply_FeedStatus)(nil),    // 33: GetSchedulerStatusReply.FeedStatus
}
var file_api_admin_proto_depIdxs = []int32{
	12, // 0: InstallOrUpdateSystemRequest.system_config:type_name -> SystemConfig
	8,  // 1: InstallOrUpdateSystemRequest.yaml_config:type_name -> YamlConfig
	27, // 2: YamlConfig.template_args:type_name -> YamlConfig.TemplateArgsEntry
	12, // 3: InstallOrUpdateSystemReply.system_config:type_name -> SystemConfig
	13, // 4: SystemConfig.feeds:type_name -> FeedConfig
	15, // 5: SystemConfig.service_maps:type_name -> ServiceMapConfig
	14, // 6: FeedConfig.gtfs_realtime_options:type_name -> GtfsRealtimeOptions
	1,  // 7: FeedConfig.scheduling_policy:type_name -> FeedConfig.SchedulingPolicy
	1,  // 8: FeedConfig.update_strategy:type_name -> FeedConfig.SchedulingPolicy
	28, // 9: FeedConfig.http_headers:type_name -> FeedConfig.HttpHeadersEntry
	29, // 10: FeedConfig.nyct_subway_options:type_name -> FeedConfig.NyctSubwayOptions
	2,  // 11: GtfsRealtimeOptions.extension:type_name -> GtfsRealtimeOptions.Extension
	30, // 12: GtfsRealtimeOptions.nyct_trips_options:type_name -> GtfsRealtimeOptions.NyctTripsOptions
	31, // 13: GtfsRealtimeOptions.nyct_alerts_options:type_name -> GtfsRealtimeOptions.NyctAlertsOptions
	4,  // 14: ServiceMapConfig.source:type_name -> ServiceMapConfig.Source
	32, // 15: ServiceMapConfig.static_options:type_name -> ServiceMapConfig.StaticOptions
	13, // 16: FeedUpdate.feed_config:type_name -> FeedConfig
	5,  // 17: FeedUpdate.status:type_name -> FeedUpdate.Status
	17, // 18: UpdateFeedReply.feed_update:type_name -> FeedUpdate
	33, // 19: GetSchedulerStatusReply.feeds:type_name -> GetSchedulerStatusReply.FeedStatus
	0,  // 20: GetLogLevelReply.log_level:type_name -> LogLevel
	0,  // 21: SetLogLevelRequest.log_level:type_name -> LogLevel
	3,  // 22: GtfsRealtimeOptions.NyctAlertsOptions.elevator_alerts_deduplication_policy:type_name -> GtfsRealtimeOptions.NyctAlertsOptions.ElevatorAlertsDeduplicationPolicy
	13, // 23: GetSchedulerStatusReply.FeedStatus.feed_config:type_name -> FeedConfig
	6,  // 24: Admin.GetSystemConfig:input_type -> GetSystemConfigRequest
	7,  // 25: Admin.InstallOrUpdateSystem:input_type -> InstallOrUpdateSystemRequest
	10, // 26: Admin.DeleteSystem:input_type -> DeleteSystemRequest
	16, // 27: Admin.UpdateFeed:input_type -> UpdateFeedRequest
	19, // 28: Admin.GetSchedulerStatus:input_type -> GetSchedulerStatusRequest
	21, // 29: Admin.ResetScheduler:input_type -> ResetSchedulerRequest
	23, // 30: Admin.GetLogLevel:input_type -> GetLogLevelRequest
	25, // 31: Admin.SetLogLevel:input_type -> SetLogLevelRequest
	12, // 32: Admin.GetSystemConfig:output_type -> SystemConfig
	9,  // 33: Admin.InstallOrUpdateSystem:output_type -> InstallOrUpdateSystemReply
	11, // 34: Admin.DeleteSystem:output_type -> DeleteSystemReply
	18, // 35: Admin.UpdateFeed:output_type -> UpdateFeedReply
	20, // 36: Admin.GetSchedulerStatus:output_type -> GetSchedulerStatusReply
	22, // 37: Admin.ResetScheduler:output_type -> ResetSchedulerReply
	24, // 38: Admin.GetLogLevel:output_type -> GetLogLevelReply
	26, // 39: Admin.SetLogLevel:output_type -> SetLogLevelReply
	32, // [32:40] is the sub-list for method output_type
	24, // [24:32] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_admin_proto_init() }
func file_api_admin_proto_init() {
	if File_api_admin_proto != nil {
		return
	}
	file_api_admin_proto_msgTypes[1].OneofWrappers = []any{
		(*InstallOrUpdateSystemRequest_SystemConfig)(nil),
		(*InstallOrUpdateSystemRequest_YamlConfig)(nil),
	}
	file_api_admin_proto_msgTypes[7].OneofWrappers = []any{}
	file_api_admin_proto_msgTypes[8].OneofWrappers = []any{}
	file_api_admin_proto_msgTypes[9].OneofWrappers = []any{}
	file_api_admin_proto_msgTypes[11].OneofWrappers = []any{}
	file_api_admin_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_admin_proto_rawDesc), len(file_api_admin_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_proto_goTypes,
		DependencyIndexes: file_api_admin_proto_depIdxs,
		EnumInfos:         file_api_admin_proto_enumTypes,
		MessageInfos:      file_api_admin_proto_msgTypes,
	}.Build()
	File_api_admin_proto = out.File
	file_api_admin_proto_goTypes = nil
	file_api_admin_proto_depIdxs = nil
}
