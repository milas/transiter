//*
//The public API is Transiter's main API and
//is used to query transit data from Transiter.
//It's a read-only API and designed to be reachable from the internet.
//
//Transiter's other API is the private [admin API](admin.md) which is used to manage the Transiter deployment.
//
//The public API is based on the following resource hierarchy:
//
//```
//System
//|- Agency
//|- Alert
//|- Feed
//|- Route
//|   |- Trip
//|- Shape
//|- Stop
//|- Transfer
//|- Vehicle
//```
//
//For each resource there is a protobuf message type, a list endpoint, and a get endpoint.
//In the HTTP API, the structure of the response is based on the protobuf message type.
//
//The URLs in the HTTP API are determined by the resource hierarchy; thus:
//
//- List all systems has URL `/systems`,
//- Get system with ID `<system_id>` has URL `/systems/<system_id>`,
//- List all routes in the system has URL `/systems/<system_id>/routes`,
//- Get route has URL `/systems/<system_id>/routes/<route_id>`,
//
//and so on.
//
//The following table summarizes all of the resources and their types.
//The right-most column describes the _source_ of the resource.
//The public API is a read-only API so all of the resources come from somewhere else.
//
//| Resource              | List endpoint                                       | Get endpoint                                    | Source               |
//| --------------------- | --------------------------------------------------- | ----------------------------------------------- |----------------------|
//| [Agency](#agency)     | [ListAgencies](public_endpoints.md#list-agencies)   | [GetAgency](public_endpoints.md#get-agency)     | GTFS static          |
//| [Alert](#alert)       | [ListAlerts](public_endpoints.md#list-alerts)       | [GetAlert](public_endpoints.md#get-alert)       | GTFS realtime        |
//| [Feed](#feed)         | [ListFeeds](public_endpoints.md#list-feeds)         | [GetFeed](public_endpoints.md#get-feed)         | System configuration |
//| [Route](#route)       | [ListRoutes](public_endpoints.md#list-routes)       | [GetRoute](public_endpoints.md#get-route)       | GTFS static          |
//| [Shape](#shape)       | [ListShapes](public_endpoints.md#list-shapes)       | [GetShape](public_endpoints.md#get-shape)       | GTFS static          |
//| [Stop](#stop)         | [ListStops](public_endpoints.md#list-stops)         | [GetStop](public_endpoints.md#get-stop)         | GTFS static          |
//| [System](#system)     | [ListSystems](public_endpoints.md#list-systems)     | [GetSystem](public_endpoints.md#get-system)     | System configuration |
//| [Transfer](#transfer) | [ListTransfers](public_endpoints.md#list-transfers) | [GetTransfer](public_endpoints.md#get-transfer) | GTFS static          |
//| [Trip](#trip)         | [ListTrips](public_endpoints.md#list-trips)         | [GetTrip](public_endpoints.md#get-trip)         | GTFS realtime        |
//| [Vehicle](#vehicle)   | [ListVehicles](public_endpoints.md#list-vehicles)   | [GetVehicle](public_endpoints.md#get-vehicle)   | GTFS realtime        |
//
//Many resources refer to other resources across the hierarchy.
//For example, each route has an agency it is attached to.
//Each stop has a list of service maps, and each service map contains a set of routes.
//In these situations the resource message contains a _reference_ to the other resource.
//The [Route](#route) message contains an agency reference, in the form of an [Agency.Reference](#agencyreference)
//message.
//These reference messages contain at least enough information to uniquely identify the resource.
//However they also contain additional information that is considered generally useful.
//For example, the [Stop.Reference](#stopreference) message contains the stop's name.
//What counts as "considered generally" is obviously subjective and open to change.
//

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/public.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/jamespfennell/transiter/internal/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PublicName is the fully-qualified name of the Public service.
	PublicName = "Public"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicEntrypointProcedure is the fully-qualified name of the Public's Entrypoint RPC.
	PublicEntrypointProcedure = "/Public/Entrypoint"
	// PublicListSystemsProcedure is the fully-qualified name of the Public's ListSystems RPC.
	PublicListSystemsProcedure = "/Public/ListSystems"
	// PublicGetSystemProcedure is the fully-qualified name of the Public's GetSystem RPC.
	PublicGetSystemProcedure = "/Public/GetSystem"
	// PublicListAgenciesProcedure is the fully-qualified name of the Public's ListAgencies RPC.
	PublicListAgenciesProcedure = "/Public/ListAgencies"
	// PublicGetAgencyProcedure is the fully-qualified name of the Public's GetAgency RPC.
	PublicGetAgencyProcedure = "/Public/GetAgency"
	// PublicListStopsProcedure is the fully-qualified name of the Public's ListStops RPC.
	PublicListStopsProcedure = "/Public/ListStops"
	// PublicGetStopProcedure is the fully-qualified name of the Public's GetStop RPC.
	PublicGetStopProcedure = "/Public/GetStop"
	// PublicListRoutesProcedure is the fully-qualified name of the Public's ListRoutes RPC.
	PublicListRoutesProcedure = "/Public/ListRoutes"
	// PublicGetRouteProcedure is the fully-qualified name of the Public's GetRoute RPC.
	PublicGetRouteProcedure = "/Public/GetRoute"
	// PublicListTripsProcedure is the fully-qualified name of the Public's ListTrips RPC.
	PublicListTripsProcedure = "/Public/ListTrips"
	// PublicGetTripProcedure is the fully-qualified name of the Public's GetTrip RPC.
	PublicGetTripProcedure = "/Public/GetTrip"
	// PublicListAlertsProcedure is the fully-qualified name of the Public's ListAlerts RPC.
	PublicListAlertsProcedure = "/Public/ListAlerts"
	// PublicGetAlertProcedure is the fully-qualified name of the Public's GetAlert RPC.
	PublicGetAlertProcedure = "/Public/GetAlert"
	// PublicListTransfersProcedure is the fully-qualified name of the Public's ListTransfers RPC.
	PublicListTransfersProcedure = "/Public/ListTransfers"
	// PublicGetTransferProcedure is the fully-qualified name of the Public's GetTransfer RPC.
	PublicGetTransferProcedure = "/Public/GetTransfer"
	// PublicListFeedsProcedure is the fully-qualified name of the Public's ListFeeds RPC.
	PublicListFeedsProcedure = "/Public/ListFeeds"
	// PublicGetFeedProcedure is the fully-qualified name of the Public's GetFeed RPC.
	PublicGetFeedProcedure = "/Public/GetFeed"
	// PublicListVehiclesProcedure is the fully-qualified name of the Public's ListVehicles RPC.
	PublicListVehiclesProcedure = "/Public/ListVehicles"
	// PublicGetVehicleProcedure is the fully-qualified name of the Public's GetVehicle RPC.
	PublicGetVehicleProcedure = "/Public/GetVehicle"
	// PublicListShapesProcedure is the fully-qualified name of the Public's ListShapes RPC.
	PublicListShapesProcedure = "/Public/ListShapes"
	// PublicGetShapeProcedure is the fully-qualified name of the Public's GetShape RPC.
	PublicGetShapeProcedure = "/Public/GetShape"
)

// PublicClient is a client for the Public service.
type PublicClient interface {
	// API entrypoint
	//
	// `GET /`
	//
	// Provides basic information about this Transiter instance and the transit systems it contains.
	Entrypoint(context.Context, *connect.Request[api.EntrypointRequest]) (*connect.Response[api.EntrypointReply], error)
	// List systems
	//
	// `GET /systems`
	//
	// List all transit systems that are installed in this Transiter instance.
	ListSystems(context.Context, *connect.Request[api.ListSystemsRequest]) (*connect.Response[api.ListSystemsReply], error)
	// Get system
	//
	// `GET /systems/<system_id>`
	//
	// Get a system by its ID.
	GetSystem(context.Context, *connect.Request[api.GetSystemRequest]) (*connect.Response[api.System], error)
	// List agencies
	//
	// `GET /systems/<system_id>/agencies`
	//
	// List all agencies in a system.
	ListAgencies(context.Context, *connect.Request[api.ListAgenciesRequest]) (*connect.Response[api.ListAgenciesReply], error)
	// Get agency
	//
	// `GET /systems/<system_id>/agencies/<agency_id>`
	//
	// Get an agency in a system by its ID.
	GetAgency(context.Context, *connect.Request[api.GetAgencyRequest]) (*connect.Response[api.Agency], error)
	// List stops
	//
	// `GET /systems/<system_id>/stops`
	//
	// List all stops in a system.
	//
	// This endpoint is paginated.
	// If there are more results, the `next_id` field of the response will be populated.
	// To get more results, make the same request with the `first_id` field set to the value of `next_id` in the response.
	ListStops(context.Context, *connect.Request[api.ListStopsRequest]) (*connect.Response[api.ListStopsReply], error)
	// Get stop
	//
	// `GET /systems/<system_id>/stops/<stop_id>`
	//
	// Get a stop in a system by its ID.
	GetStop(context.Context, *connect.Request[api.GetStopRequest]) (*connect.Response[api.Stop], error)
	// List routes
	//
	// `GET /systems/<system_id>/routes`
	//
	// List all routes in a system.
	ListRoutes(context.Context, *connect.Request[api.ListRoutesRequest]) (*connect.Response[api.ListRoutesReply], error)
	// Get route
	//
	// `GET /systems/<system_id>/routes/<route_id>`
	//
	// Get a route in a system by its ID.
	GetRoute(context.Context, *connect.Request[api.GetRouteRequest]) (*connect.Response[api.Route], error)
	// List trips
	//
	// `GET /systems/<system_id>/routes/<route_id>/trips`
	//
	// List all trips in a route.
	ListTrips(context.Context, *connect.Request[api.ListTripsRequest]) (*connect.Response[api.ListTripsReply], error)
	// Get trip
	//
	// `GET /systems/<system_id>/routes/<route_id>/trips/<trip_id>`
	//
	// Get a trip by its ID.
	GetTrip(context.Context, *connect.Request[api.GetTripRequest]) (*connect.Response[api.Trip], error)
	// List alerts
	//
	// `GET /systems/<system_id>/alerts`
	//
	// List all alerts in a system.
	// By default this endpoint returns both active alerts
	//
	//	(alerts which have an active period containing the current time) and non-active alerts.
	ListAlerts(context.Context, *connect.Request[api.ListAlertsRequest]) (*connect.Response[api.ListAlertsReply], error)
	// Get alert
	//
	// `GET /systems/<system_id>/alerts/<alert_id>`
	//
	// Get an alert by its ID.
	GetAlert(context.Context, *connect.Request[api.GetAlertRequest]) (*connect.Response[api.Alert], error)
	// List transfers
	//
	// `GET /systems/<system_id>/transfers`
	//
	// List all transfers in a system.
	ListTransfers(context.Context, *connect.Request[api.ListTransfersRequest]) (*connect.Response[api.ListTransfersReply], error)
	// Get transfer
	//
	// `GET /systems/<system_id>/transfers/<transfer_id>`
	//
	// Get a transfer by its ID.
	GetTransfer(context.Context, *connect.Request[api.GetTransferRequest]) (*connect.Response[api.Transfer], error)
	// List feeds
	//
	// `GET /systems/<system_id>/feeds`
	//
	// List all feeds for a system.
	ListFeeds(context.Context, *connect.Request[api.ListFeedsRequest]) (*connect.Response[api.ListFeedsReply], error)
	// Get feed
	//
	// `GET /systems/<system_id>/feeds/<feed_id>`
	//
	// Get a feed in a system by its ID.
	GetFeed(context.Context, *connect.Request[api.GetFeedRequest]) (*connect.Response[api.Feed], error)
	// List vehicles
	//
	// `GET /systems/<system_id>/vehicles`
	//
	// List all feeds for a system.
	ListVehicles(context.Context, *connect.Request[api.ListVehiclesRequest]) (*connect.Response[api.ListVehiclesReply], error)
	// Get vehicle
	//
	// `GET /systems/<system_id>/vehicles/<vehicle_id>`
	//
	// Get a vehicle in a system by its ID.
	GetVehicle(context.Context, *connect.Request[api.GetVehicleRequest]) (*connect.Response[api.Vehicle], error)
	// List shapes
	//
	// `GET /systems/<system_id>/shapes`
	//
	// List all shapes in a system.
	ListShapes(context.Context, *connect.Request[api.ListShapesRequest]) (*connect.Response[api.ListShapesReply], error)
	// Get shape
	//
	// `GET /systems/<system_id>/shapes/<shape_id>`
	//
	// Get a shape in a system by its ID.
	GetShape(context.Context, *connect.Request[api.GetShapeRequest]) (*connect.Response[api.Shape], error)
}

// NewPublicClient constructs a client for the Public service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PublicClient {
	baseURL = strings.TrimRight(baseURL, "/")
	publicMethods := api.File_api_public_proto.Services().ByName("Public").Methods()
	return &publicClient{
		entrypoint: connect.NewClient[api.EntrypointRequest, api.EntrypointReply](
			httpClient,
			baseURL+PublicEntrypointProcedure,
			connect.WithSchema(publicMethods.ByName("Entrypoint")),
			connect.WithClientOptions(opts...),
		),
		listSystems: connect.NewClient[api.ListSystemsRequest, api.ListSystemsReply](
			httpClient,
			baseURL+PublicListSystemsProcedure,
			connect.WithSchema(publicMethods.ByName("ListSystems")),
			connect.WithClientOptions(opts...),
		),
		getSystem: connect.NewClient[api.GetSystemRequest, api.System](
			httpClient,
			baseURL+PublicGetSystemProcedure,
			connect.WithSchema(publicMethods.ByName("GetSystem")),
			connect.WithClientOptions(opts...),
		),
		listAgencies: connect.NewClient[api.ListAgenciesRequest, api.ListAgenciesReply](
			httpClient,
			baseURL+PublicListAgenciesProcedure,
			connect.WithSchema(publicMethods.ByName("ListAgencies")),
			connect.WithClientOptions(opts...),
		),
		getAgency: connect.NewClient[api.GetAgencyRequest, api.Agency](
			httpClient,
			baseURL+PublicGetAgencyProcedure,
			connect.WithSchema(publicMethods.ByName("GetAgency")),
			connect.WithClientOptions(opts...),
		),
		listStops: connect.NewClient[api.ListStopsRequest, api.ListStopsReply](
			httpClient,
			baseURL+PublicListStopsProcedure,
			connect.WithSchema(publicMethods.ByName("ListStops")),
			connect.WithClientOptions(opts...),
		),
		getStop: connect.NewClient[api.GetStopRequest, api.Stop](
			httpClient,
			baseURL+PublicGetStopProcedure,
			connect.WithSchema(publicMethods.ByName("GetStop")),
			connect.WithClientOptions(opts...),
		),
		listRoutes: connect.NewClient[api.ListRoutesRequest, api.ListRoutesReply](
			httpClient,
			baseURL+PublicListRoutesProcedure,
			connect.WithSchema(publicMethods.ByName("ListRoutes")),
			connect.WithClientOptions(opts...),
		),
		getRoute: connect.NewClient[api.GetRouteRequest, api.Route](
			httpClient,
			baseURL+PublicGetRouteProcedure,
			connect.WithSchema(publicMethods.ByName("GetRoute")),
			connect.WithClientOptions(opts...),
		),
		listTrips: connect.NewClient[api.ListTripsRequest, api.ListTripsReply](
			httpClient,
			baseURL+PublicListTripsProcedure,
			connect.WithSchema(publicMethods.ByName("ListTrips")),
			connect.WithClientOptions(opts...),
		),
		getTrip: connect.NewClient[api.GetTripRequest, api.Trip](
			httpClient,
			baseURL+PublicGetTripProcedure,
			connect.WithSchema(publicMethods.ByName("GetTrip")),
			connect.WithClientOptions(opts...),
		),
		listAlerts: connect.NewClient[api.ListAlertsRequest, api.ListAlertsReply](
			httpClient,
			baseURL+PublicListAlertsProcedure,
			connect.WithSchema(publicMethods.ByName("ListAlerts")),
			connect.WithClientOptions(opts...),
		),
		getAlert: connect.NewClient[api.GetAlertRequest, api.Alert](
			httpClient,
			baseURL+PublicGetAlertProcedure,
			connect.WithSchema(publicMethods.ByName("GetAlert")),
			connect.WithClientOptions(opts...),
		),
		listTransfers: connect.NewClient[api.ListTransfersRequest, api.ListTransfersReply](
			httpClient,
			baseURL+PublicListTransfersProcedure,
			connect.WithSchema(publicMethods.ByName("ListTransfers")),
			connect.WithClientOptions(opts...),
		),
		getTransfer: connect.NewClient[api.GetTransferRequest, api.Transfer](
			httpClient,
			baseURL+PublicGetTransferProcedure,
			connect.WithSchema(publicMethods.ByName("GetTransfer")),
			connect.WithClientOptions(opts...),
		),
		listFeeds: connect.NewClient[api.ListFeedsRequest, api.ListFeedsReply](
			httpClient,
			baseURL+PublicListFeedsProcedure,
			connect.WithSchema(publicMethods.ByName("ListFeeds")),
			connect.WithClientOptions(opts...),
		),
		getFeed: connect.NewClient[api.GetFeedRequest, api.Feed](
			httpClient,
			baseURL+PublicGetFeedProcedure,
			connect.WithSchema(publicMethods.ByName("GetFeed")),
			connect.WithClientOptions(opts...),
		),
		listVehicles: connect.NewClient[api.ListVehiclesRequest, api.ListVehiclesReply](
			httpClient,
			baseURL+PublicListVehiclesProcedure,
			connect.WithSchema(publicMethods.ByName("ListVehicles")),
			connect.WithClientOptions(opts...),
		),
		getVehicle: connect.NewClient[api.GetVehicleRequest, api.Vehicle](
			httpClient,
			baseURL+PublicGetVehicleProcedure,
			connect.WithSchema(publicMethods.ByName("GetVehicle")),
			connect.WithClientOptions(opts...),
		),
		listShapes: connect.NewClient[api.ListShapesRequest, api.ListShapesReply](
			httpClient,
			baseURL+PublicListShapesProcedure,
			connect.WithSchema(publicMethods.ByName("ListShapes")),
			connect.WithClientOptions(opts...),
		),
		getShape: connect.NewClient[api.GetShapeRequest, api.Shape](
			httpClient,
			baseURL+PublicGetShapeProcedure,
			connect.WithSchema(publicMethods.ByName("GetShape")),
			connect.WithClientOptions(opts...),
		),
	}
}

// publicClient implements PublicClient.
type publicClient struct {
	entrypoint    *connect.Client[api.EntrypointRequest, api.EntrypointReply]
	listSystems   *connect.Client[api.ListSystemsRequest, api.ListSystemsReply]
	getSystem     *connect.Client[api.GetSystemRequest, api.System]
	listAgencies  *connect.Client[api.ListAgenciesRequest, api.ListAgenciesReply]
	getAgency     *connect.Client[api.GetAgencyRequest, api.Agency]
	listStops     *connect.Client[api.ListStopsRequest, api.ListStopsReply]
	getStop       *connect.Client[api.GetStopRequest, api.Stop]
	listRoutes    *connect.Client[api.ListRoutesRequest, api.ListRoutesReply]
	getRoute      *connect.Client[api.GetRouteRequest, api.Route]
	listTrips     *connect.Client[api.ListTripsRequest, api.ListTripsReply]
	getTrip       *connect.Client[api.GetTripRequest, api.Trip]
	listAlerts    *connect.Client[api.ListAlertsRequest, api.ListAlertsReply]
	getAlert      *connect.Client[api.GetAlertRequest, api.Alert]
	listTransfers *connect.Client[api.ListTransfersRequest, api.ListTransfersReply]
	getTransfer   *connect.Client[api.GetTransferRequest, api.Transfer]
	listFeeds     *connect.Client[api.ListFeedsRequest, api.ListFeedsReply]
	getFeed       *connect.Client[api.GetFeedRequest, api.Feed]
	listVehicles  *connect.Client[api.ListVehiclesRequest, api.ListVehiclesReply]
	getVehicle    *connect.Client[api.GetVehicleRequest, api.Vehicle]
	listShapes    *connect.Client[api.ListShapesRequest, api.ListShapesReply]
	getShape      *connect.Client[api.GetShapeRequest, api.Shape]
}

// Entrypoint calls Public.Entrypoint.
func (c *publicClient) Entrypoint(ctx context.Context, req *connect.Request[api.EntrypointRequest]) (*connect.Response[api.EntrypointReply], error) {
	return c.entrypoint.CallUnary(ctx, req)
}

// ListSystems calls Public.ListSystems.
func (c *publicClient) ListSystems(ctx context.Context, req *connect.Request[api.ListSystemsRequest]) (*connect.Response[api.ListSystemsReply], error) {
	return c.listSystems.CallUnary(ctx, req)
}

// GetSystem calls Public.GetSystem.
func (c *publicClient) GetSystem(ctx context.Context, req *connect.Request[api.GetSystemRequest]) (*connect.Response[api.System], error) {
	return c.getSystem.CallUnary(ctx, req)
}

// ListAgencies calls Public.ListAgencies.
func (c *publicClient) ListAgencies(ctx context.Context, req *connect.Request[api.ListAgenciesRequest]) (*connect.Response[api.ListAgenciesReply], error) {
	return c.listAgencies.CallUnary(ctx, req)
}

// GetAgency calls Public.GetAgency.
func (c *publicClient) GetAgency(ctx context.Context, req *connect.Request[api.GetAgencyRequest]) (*connect.Response[api.Agency], error) {
	return c.getAgency.CallUnary(ctx, req)
}

// ListStops calls Public.ListStops.
func (c *publicClient) ListStops(ctx context.Context, req *connect.Request[api.ListStopsRequest]) (*connect.Response[api.ListStopsReply], error) {
	return c.listStops.CallUnary(ctx, req)
}

// GetStop calls Public.GetStop.
func (c *publicClient) GetStop(ctx context.Context, req *connect.Request[api.GetStopRequest]) (*connect.Response[api.Stop], error) {
	return c.getStop.CallUnary(ctx, req)
}

// ListRoutes calls Public.ListRoutes.
func (c *publicClient) ListRoutes(ctx context.Context, req *connect.Request[api.ListRoutesRequest]) (*connect.Response[api.ListRoutesReply], error) {
	return c.listRoutes.CallUnary(ctx, req)
}

// GetRoute calls Public.GetRoute.
func (c *publicClient) GetRoute(ctx context.Context, req *connect.Request[api.GetRouteRequest]) (*connect.Response[api.Route], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// ListTrips calls Public.ListTrips.
func (c *publicClient) ListTrips(ctx context.Context, req *connect.Request[api.ListTripsRequest]) (*connect.Response[api.ListTripsReply], error) {
	return c.listTrips.CallUnary(ctx, req)
}

// GetTrip calls Public.GetTrip.
func (c *publicClient) GetTrip(ctx context.Context, req *connect.Request[api.GetTripRequest]) (*connect.Response[api.Trip], error) {
	return c.getTrip.CallUnary(ctx, req)
}

// ListAlerts calls Public.ListAlerts.
func (c *publicClient) ListAlerts(ctx context.Context, req *connect.Request[api.ListAlertsRequest]) (*connect.Response[api.ListAlertsReply], error) {
	return c.listAlerts.CallUnary(ctx, req)
}

// GetAlert calls Public.GetAlert.
func (c *publicClient) GetAlert(ctx context.Context, req *connect.Request[api.GetAlertRequest]) (*connect.Response[api.Alert], error) {
	return c.getAlert.CallUnary(ctx, req)
}

// ListTransfers calls Public.ListTransfers.
func (c *publicClient) ListTransfers(ctx context.Context, req *connect.Request[api.ListTransfersRequest]) (*connect.Response[api.ListTransfersReply], error) {
	return c.listTransfers.CallUnary(ctx, req)
}

// GetTransfer calls Public.GetTransfer.
func (c *publicClient) GetTransfer(ctx context.Context, req *connect.Request[api.GetTransferRequest]) (*connect.Response[api.Transfer], error) {
	return c.getTransfer.CallUnary(ctx, req)
}

// ListFeeds calls Public.ListFeeds.
func (c *publicClient) ListFeeds(ctx context.Context, req *connect.Request[api.ListFeedsRequest]) (*connect.Response[api.ListFeedsReply], error) {
	return c.listFeeds.CallUnary(ctx, req)
}

// GetFeed calls Public.GetFeed.
func (c *publicClient) GetFeed(ctx context.Context, req *connect.Request[api.GetFeedRequest]) (*connect.Response[api.Feed], error) {
	return c.getFeed.CallUnary(ctx, req)
}

// ListVehicles calls Public.ListVehicles.
func (c *publicClient) ListVehicles(ctx context.Context, req *connect.Request[api.ListVehiclesRequest]) (*connect.Response[api.ListVehiclesReply], error) {
	return c.listVehicles.CallUnary(ctx, req)
}

// GetVehicle calls Public.GetVehicle.
func (c *publicClient) GetVehicle(ctx context.Context, req *connect.Request[api.GetVehicleRequest]) (*connect.Response[api.Vehicle], error) {
	return c.getVehicle.CallUnary(ctx, req)
}

// ListShapes calls Public.ListShapes.
func (c *publicClient) ListShapes(ctx context.Context, req *connect.Request[api.ListShapesRequest]) (*connect.Response[api.ListShapesReply], error) {
	return c.listShapes.CallUnary(ctx, req)
}

// GetShape calls Public.GetShape.
func (c *publicClient) GetShape(ctx context.Context, req *connect.Request[api.GetShapeRequest]) (*connect.Response[api.Shape], error) {
	return c.getShape.CallUnary(ctx, req)
}

// PublicHandler is an implementation of the Public service.
type PublicHandler interface {
	// API entrypoint
	//
	// `GET /`
	//
	// Provides basic information about this Transiter instance and the transit systems it contains.
	Entrypoint(context.Context, *connect.Request[api.EntrypointRequest]) (*connect.Response[api.EntrypointReply], error)
	// List systems
	//
	// `GET /systems`
	//
	// List all transit systems that are installed in this Transiter instance.
	ListSystems(context.Context, *connect.Request[api.ListSystemsRequest]) (*connect.Response[api.ListSystemsReply], error)
	// Get system
	//
	// `GET /systems/<system_id>`
	//
	// Get a system by its ID.
	GetSystem(context.Context, *connect.Request[api.GetSystemRequest]) (*connect.Response[api.System], error)
	// List agencies
	//
	// `GET /systems/<system_id>/agencies`
	//
	// List all agencies in a system.
	ListAgencies(context.Context, *connect.Request[api.ListAgenciesRequest]) (*connect.Response[api.ListAgenciesReply], error)
	// Get agency
	//
	// `GET /systems/<system_id>/agencies/<agency_id>`
	//
	// Get an agency in a system by its ID.
	GetAgency(context.Context, *connect.Request[api.GetAgencyRequest]) (*connect.Response[api.Agency], error)
	// List stops
	//
	// `GET /systems/<system_id>/stops`
	//
	// List all stops in a system.
	//
	// This endpoint is paginated.
	// If there are more results, the `next_id` field of the response will be populated.
	// To get more results, make the same request with the `first_id` field set to the value of `next_id` in the response.
	ListStops(context.Context, *connect.Request[api.ListStopsRequest]) (*connect.Response[api.ListStopsReply], error)
	// Get stop
	//
	// `GET /systems/<system_id>/stops/<stop_id>`
	//
	// Get a stop in a system by its ID.
	GetStop(context.Context, *connect.Request[api.GetStopRequest]) (*connect.Response[api.Stop], error)
	// List routes
	//
	// `GET /systems/<system_id>/routes`
	//
	// List all routes in a system.
	ListRoutes(context.Context, *connect.Request[api.ListRoutesRequest]) (*connect.Response[api.ListRoutesReply], error)
	// Get route
	//
	// `GET /systems/<system_id>/routes/<route_id>`
	//
	// Get a route in a system by its ID.
	GetRoute(context.Context, *connect.Request[api.GetRouteRequest]) (*connect.Response[api.Route], error)
	// List trips
	//
	// `GET /systems/<system_id>/routes/<route_id>/trips`
	//
	// List all trips in a route.
	ListTrips(context.Context, *connect.Request[api.ListTripsRequest]) (*connect.Response[api.ListTripsReply], error)
	// Get trip
	//
	// `GET /systems/<system_id>/routes/<route_id>/trips/<trip_id>`
	//
	// Get a trip by its ID.
	GetTrip(context.Context, *connect.Request[api.GetTripRequest]) (*connect.Response[api.Trip], error)
	// List alerts
	//
	// `GET /systems/<system_id>/alerts`
	//
	// List all alerts in a system.
	// By default this endpoint returns both active alerts
	//
	//	(alerts which have an active period containing the current time) and non-active alerts.
	ListAlerts(context.Context, *connect.Request[api.ListAlertsRequest]) (*connect.Response[api.ListAlertsReply], error)
	// Get alert
	//
	// `GET /systems/<system_id>/alerts/<alert_id>`
	//
	// Get an alert by its ID.
	GetAlert(context.Context, *connect.Request[api.GetAlertRequest]) (*connect.Response[api.Alert], error)
	// List transfers
	//
	// `GET /systems/<system_id>/transfers`
	//
	// List all transfers in a system.
	ListTransfers(context.Context, *connect.Request[api.ListTransfersRequest]) (*connect.Response[api.ListTransfersReply], error)
	// Get transfer
	//
	// `GET /systems/<system_id>/transfers/<transfer_id>`
	//
	// Get a transfer by its ID.
	GetTransfer(context.Context, *connect.Request[api.GetTransferRequest]) (*connect.Response[api.Transfer], error)
	// List feeds
	//
	// `GET /systems/<system_id>/feeds`
	//
	// List all feeds for a system.
	ListFeeds(context.Context, *connect.Request[api.ListFeedsRequest]) (*connect.Response[api.ListFeedsReply], error)
	// Get feed
	//
	// `GET /systems/<system_id>/feeds/<feed_id>`
	//
	// Get a feed in a system by its ID.
	GetFeed(context.Context, *connect.Request[api.GetFeedRequest]) (*connect.Response[api.Feed], error)
	// List vehicles
	//
	// `GET /systems/<system_id>/vehicles`
	//
	// List all feeds for a system.
	ListVehicles(context.Context, *connect.Request[api.ListVehiclesRequest]) (*connect.Response[api.ListVehiclesReply], error)
	// Get vehicle
	//
	// `GET /systems/<system_id>/vehicles/<vehicle_id>`
	//
	// Get a vehicle in a system by its ID.
	GetVehicle(context.Context, *connect.Request[api.GetVehicleRequest]) (*connect.Response[api.Vehicle], error)
	// List shapes
	//
	// `GET /systems/<system_id>/shapes`
	//
	// List all shapes in a system.
	ListShapes(context.Context, *connect.Request[api.ListShapesRequest]) (*connect.Response[api.ListShapesReply], error)
	// Get shape
	//
	// `GET /systems/<system_id>/shapes/<shape_id>`
	//
	// Get a shape in a system by its ID.
	GetShape(context.Context, *connect.Request[api.GetShapeRequest]) (*connect.Response[api.Shape], error)
}

// NewPublicHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicHandler(svc PublicHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	publicMethods := api.File_api_public_proto.Services().ByName("Public").Methods()
	publicEntrypointHandler := connect.NewUnaryHandler(
		PublicEntrypointProcedure,
		svc.Entrypoint,
		connect.WithSchema(publicMethods.ByName("Entrypoint")),
		connect.WithHandlerOptions(opts...),
	)
	publicListSystemsHandler := connect.NewUnaryHandler(
		PublicListSystemsProcedure,
		svc.ListSystems,
		connect.WithSchema(publicMethods.ByName("ListSystems")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetSystemHandler := connect.NewUnaryHandler(
		PublicGetSystemProcedure,
		svc.GetSystem,
		connect.WithSchema(publicMethods.ByName("GetSystem")),
		connect.WithHandlerOptions(opts...),
	)
	publicListAgenciesHandler := connect.NewUnaryHandler(
		PublicListAgenciesProcedure,
		svc.ListAgencies,
		connect.WithSchema(publicMethods.ByName("ListAgencies")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetAgencyHandler := connect.NewUnaryHandler(
		PublicGetAgencyProcedure,
		svc.GetAgency,
		connect.WithSchema(publicMethods.ByName("GetAgency")),
		connect.WithHandlerOptions(opts...),
	)
	publicListStopsHandler := connect.NewUnaryHandler(
		PublicListStopsProcedure,
		svc.ListStops,
		connect.WithSchema(publicMethods.ByName("ListStops")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetStopHandler := connect.NewUnaryHandler(
		PublicGetStopProcedure,
		svc.GetStop,
		connect.WithSchema(publicMethods.ByName("GetStop")),
		connect.WithHandlerOptions(opts...),
	)
	publicListRoutesHandler := connect.NewUnaryHandler(
		PublicListRoutesProcedure,
		svc.ListRoutes,
		connect.WithSchema(publicMethods.ByName("ListRoutes")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetRouteHandler := connect.NewUnaryHandler(
		PublicGetRouteProcedure,
		svc.GetRoute,
		connect.WithSchema(publicMethods.ByName("GetRoute")),
		connect.WithHandlerOptions(opts...),
	)
	publicListTripsHandler := connect.NewUnaryHandler(
		PublicListTripsProcedure,
		svc.ListTrips,
		connect.WithSchema(publicMethods.ByName("ListTrips")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetTripHandler := connect.NewUnaryHandler(
		PublicGetTripProcedure,
		svc.GetTrip,
		connect.WithSchema(publicMethods.ByName("GetTrip")),
		connect.WithHandlerOptions(opts...),
	)
	publicListAlertsHandler := connect.NewUnaryHandler(
		PublicListAlertsProcedure,
		svc.ListAlerts,
		connect.WithSchema(publicMethods.ByName("ListAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetAlertHandler := connect.NewUnaryHandler(
		PublicGetAlertProcedure,
		svc.GetAlert,
		connect.WithSchema(publicMethods.ByName("GetAlert")),
		connect.WithHandlerOptions(opts...),
	)
	publicListTransfersHandler := connect.NewUnaryHandler(
		PublicListTransfersProcedure,
		svc.ListTransfers,
		connect.WithSchema(publicMethods.ByName("ListTransfers")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetTransferHandler := connect.NewUnaryHandler(
		PublicGetTransferProcedure,
		svc.GetTransfer,
		connect.WithSchema(publicMethods.ByName("GetTransfer")),
		connect.WithHandlerOptions(opts...),
	)
	publicListFeedsHandler := connect.NewUnaryHandler(
		PublicListFeedsProcedure,
		svc.ListFeeds,
		connect.WithSchema(publicMethods.ByName("ListFeeds")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetFeedHandler := connect.NewUnaryHandler(
		PublicGetFeedProcedure,
		svc.GetFeed,
		connect.WithSchema(publicMethods.ByName("GetFeed")),
		connect.WithHandlerOptions(opts...),
	)
	publicListVehiclesHandler := connect.NewUnaryHandler(
		PublicListVehiclesProcedure,
		svc.ListVehicles,
		connect.WithSchema(publicMethods.ByName("ListVehicles")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetVehicleHandler := connect.NewUnaryHandler(
		PublicGetVehicleProcedure,
		svc.GetVehicle,
		connect.WithSchema(publicMethods.ByName("GetVehicle")),
		connect.WithHandlerOptions(opts...),
	)
	publicListShapesHandler := connect.NewUnaryHandler(
		PublicListShapesProcedure,
		svc.ListShapes,
		connect.WithSchema(publicMethods.ByName("ListShapes")),
		connect.WithHandlerOptions(opts...),
	)
	publicGetShapeHandler := connect.NewUnaryHandler(
		PublicGetShapeProcedure,
		svc.GetShape,
		connect.WithSchema(publicMethods.ByName("GetShape")),
		connect.WithHandlerOptions(opts...),
	)
	return "/Public/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicEntrypointProcedure:
			publicEntrypointHandler.ServeHTTP(w, r)
		case PublicListSystemsProcedure:
			publicListSystemsHandler.ServeHTTP(w, r)
		case PublicGetSystemProcedure:
			publicGetSystemHandler.ServeHTTP(w, r)
		case PublicListAgenciesProcedure:
			publicListAgenciesHandler.ServeHTTP(w, r)
		case PublicGetAgencyProcedure:
			publicGetAgencyHandler.ServeHTTP(w, r)
		case PublicListStopsProcedure:
			publicListStopsHandler.ServeHTTP(w, r)
		case PublicGetStopProcedure:
			publicGetStopHandler.ServeHTTP(w, r)
		case PublicListRoutesProcedure:
			publicListRoutesHandler.ServeHTTP(w, r)
		case PublicGetRouteProcedure:
			publicGetRouteHandler.ServeHTTP(w, r)
		case PublicListTripsProcedure:
			publicListTripsHandler.ServeHTTP(w, r)
		case PublicGetTripProcedure:
			publicGetTripHandler.ServeHTTP(w, r)
		case PublicListAlertsProcedure:
			publicListAlertsHandler.ServeHTTP(w, r)
		case PublicGetAlertProcedure:
			publicGetAlertHandler.ServeHTTP(w, r)
		case PublicListTransfersProcedure:
			publicListTransfersHandler.ServeHTTP(w, r)
		case PublicGetTransferProcedure:
			publicGetTransferHandler.ServeHTTP(w, r)
		case PublicListFeedsProcedure:
			publicListFeedsHandler.ServeHTTP(w, r)
		case PublicGetFeedProcedure:
			publicGetFeedHandler.ServeHTTP(w, r)
		case PublicListVehiclesProcedure:
			publicListVehiclesHandler.ServeHTTP(w, r)
		case PublicGetVehicleProcedure:
			publicGetVehicleHandler.ServeHTTP(w, r)
		case PublicListShapesProcedure:
			publicListShapesHandler.ServeHTTP(w, r)
		case PublicGetShapeProcedure:
			publicGetShapeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicHandler struct{}

func (UnimplementedPublicHandler) Entrypoint(context.Context, *connect.Request[api.EntrypointRequest]) (*connect.Response[api.EntrypointReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.Entrypoint is not implemented"))
}

func (UnimplementedPublicHandler) ListSystems(context.Context, *connect.Request[api.ListSystemsRequest]) (*connect.Response[api.ListSystemsReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListSystems is not implemented"))
}

func (UnimplementedPublicHandler) GetSystem(context.Context, *connect.Request[api.GetSystemRequest]) (*connect.Response[api.System], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetSystem is not implemented"))
}

func (UnimplementedPublicHandler) ListAgencies(context.Context, *connect.Request[api.ListAgenciesRequest]) (*connect.Response[api.ListAgenciesReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListAgencies is not implemented"))
}

func (UnimplementedPublicHandler) GetAgency(context.Context, *connect.Request[api.GetAgencyRequest]) (*connect.Response[api.Agency], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetAgency is not implemented"))
}

func (UnimplementedPublicHandler) ListStops(context.Context, *connect.Request[api.ListStopsRequest]) (*connect.Response[api.ListStopsReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListStops is not implemented"))
}

func (UnimplementedPublicHandler) GetStop(context.Context, *connect.Request[api.GetStopRequest]) (*connect.Response[api.Stop], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetStop is not implemented"))
}

func (UnimplementedPublicHandler) ListRoutes(context.Context, *connect.Request[api.ListRoutesRequest]) (*connect.Response[api.ListRoutesReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListRoutes is not implemented"))
}

func (UnimplementedPublicHandler) GetRoute(context.Context, *connect.Request[api.GetRouteRequest]) (*connect.Response[api.Route], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetRoute is not implemented"))
}

func (UnimplementedPublicHandler) ListTrips(context.Context, *connect.Request[api.ListTripsRequest]) (*connect.Response[api.ListTripsReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListTrips is not implemented"))
}

func (UnimplementedPublicHandler) GetTrip(context.Context, *connect.Request[api.GetTripRequest]) (*connect.Response[api.Trip], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetTrip is not implemented"))
}

func (UnimplementedPublicHandler) ListAlerts(context.Context, *connect.Request[api.ListAlertsRequest]) (*connect.Response[api.ListAlertsReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListAlerts is not implemented"))
}

func (UnimplementedPublicHandler) GetAlert(context.Context, *connect.Request[api.GetAlertRequest]) (*connect.Response[api.Alert], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetAlert is not implemented"))
}

func (UnimplementedPublicHandler) ListTransfers(context.Context, *connect.Request[api.ListTransfersRequest]) (*connect.Response[api.ListTransfersReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListTransfers is not implemented"))
}

func (UnimplementedPublicHandler) GetTransfer(context.Context, *connect.Request[api.GetTransferRequest]) (*connect.Response[api.Transfer], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetTransfer is not implemented"))
}

func (UnimplementedPublicHandler) ListFeeds(context.Context, *connect.Request[api.ListFeedsRequest]) (*connect.Response[api.ListFeedsReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListFeeds is not implemented"))
}

func (UnimplementedPublicHandler) GetFeed(context.Context, *connect.Request[api.GetFeedRequest]) (*connect.Response[api.Feed], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetFeed is not implemented"))
}

func (UnimplementedPublicHandler) ListVehicles(context.Context, *connect.Request[api.ListVehiclesRequest]) (*connect.Response[api.ListVehiclesReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListVehicles is not implemented"))
}

func (UnimplementedPublicHandler) GetVehicle(context.Context, *connect.Request[api.GetVehicleRequest]) (*connect.Response[api.Vehicle], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetVehicle is not implemented"))
}

func (UnimplementedPublicHandler) ListShapes(context.Context, *connect.Request[api.ListShapesRequest]) (*connect.Response[api.ListShapesReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.ListShapes is not implemented"))
}

func (UnimplementedPublicHandler) GetShape(context.Context, *connect.Request[api.GetShapeRequest]) (*connect.Response[api.Shape], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Public.GetShape is not implemented"))
}
