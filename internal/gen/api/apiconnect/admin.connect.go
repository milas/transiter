//*
//The admin API is a private API used to manage a running Transiter instance.
//It should generally be inaccessible from the internet as the API can be used to e.g.
//delete all of the transit systems that are installed.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/admin.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/jamespfennell/transiter/internal/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminName is the fully-qualified name of the Admin service.
	AdminName = "Admin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminGetSystemConfigProcedure is the fully-qualified name of the Admin's GetSystemConfig RPC.
	AdminGetSystemConfigProcedure = "/Admin/GetSystemConfig"
	// AdminInstallOrUpdateSystemProcedure is the fully-qualified name of the Admin's
	// InstallOrUpdateSystem RPC.
	AdminInstallOrUpdateSystemProcedure = "/Admin/InstallOrUpdateSystem"
	// AdminDeleteSystemProcedure is the fully-qualified name of the Admin's DeleteSystem RPC.
	AdminDeleteSystemProcedure = "/Admin/DeleteSystem"
	// AdminUpdateFeedProcedure is the fully-qualified name of the Admin's UpdateFeed RPC.
	AdminUpdateFeedProcedure = "/Admin/UpdateFeed"
	// AdminGetSchedulerStatusProcedure is the fully-qualified name of the Admin's GetSchedulerStatus
	// RPC.
	AdminGetSchedulerStatusProcedure = "/Admin/GetSchedulerStatus"
	// AdminResetSchedulerProcedure is the fully-qualified name of the Admin's ResetScheduler RPC.
	AdminResetSchedulerProcedure = "/Admin/ResetScheduler"
	// AdminGetLogLevelProcedure is the fully-qualified name of the Admin's GetLogLevel RPC.
	AdminGetLogLevelProcedure = "/Admin/GetLogLevel"
	// AdminSetLogLevelProcedure is the fully-qualified name of the Admin's SetLogLevel RPC.
	AdminSetLogLevelProcedure = "/Admin/SetLogLevel"
)

// AdminClient is a client for the Admin service.
type AdminClient interface {
	// Get the config for a system
	//
	// `GET /systems/<system_id>/config`
	GetSystemConfig(context.Context, *connect.Request[api.GetSystemConfigRequest]) (*connect.Response[api.SystemConfig], error)
	// Install or update a system
	//
	// `PUT /systems/<system_id>`
	//
	// Installs or updates the system based on the configuration provided in the
	// request payload.
	// If the system does not exist an install is performed; otherwise the system is updated.
	//
	// This is an asynchronous operation.
	// The system configuration is validated before the request finishes
	// but database and feed updates are performed asynchronously. The status of the operation can
	// be determined by polling the [GetSystem endpoint](public_endpoints.md#get-system)
	// and inspecting the status field of the system.
	InstallOrUpdateSystem(context.Context, *connect.Request[api.InstallOrUpdateSystemRequest]) (*connect.Response[api.InstallOrUpdateSystemReply], error)
	// Delete a system
	//
	// `DELETE /systems/<system_id>`
	//
	// Deletes the specified system.
	DeleteSystem(context.Context, *connect.Request[api.DeleteSystemRequest]) (*connect.Response[api.DeleteSystemReply], error)
	// Update a feed
	//
	// `POST /systems/<system_id>/feeds/<feed_id>`
	//
	// Triggers a feed update for the specified feed.
	UpdateFeed(context.Context, *connect.Request[api.UpdateFeedRequest]) (*connect.Response[api.UpdateFeedReply], error)
	// Get scheduler status
	//
	// `GET /scheduler`
	//
	// Gets the status of the scheduler.
	GetSchedulerStatus(context.Context, *connect.Request[api.GetSchedulerStatusRequest]) (*connect.Response[api.GetSchedulerStatusReply], error)
	// Reset scheduler
	//
	// `POST /scheduler`
	//
	// Performs a full restart of the scheduler, with all scheduler
	//
	//	configurations retrieved fresh from the database.
	//
	// In general this endpoint should never be needed;
	//
	//	 Transiter automatically restarts the scheduler when needed.
	//	The main use-case is when the Postgres configuration is manually
	//	 updated and the scheduler needs to see the update.
	ResetScheduler(context.Context, *connect.Request[api.ResetSchedulerRequest]) (*connect.Response[api.ResetSchedulerReply], error)
	// Get the current log level.
	//
	// `GET /loglevel`
	GetLogLevel(context.Context, *connect.Request[api.GetLogLevelRequest]) (*connect.Response[api.GetLogLevelReply], error)
	// Set the log level.
	//
	// `PUT /loglevel`
	SetLogLevel(context.Context, *connect.Request[api.SetLogLevelRequest]) (*connect.Response[api.SetLogLevelReply], error)
}

// NewAdminClient constructs a client for the Admin service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminMethods := api.File_api_admin_proto.Services().ByName("Admin").Methods()
	return &adminClient{
		getSystemConfig: connect.NewClient[api.GetSystemConfigRequest, api.SystemConfig](
			httpClient,
			baseURL+AdminGetSystemConfigProcedure,
			connect.WithSchema(adminMethods.ByName("GetSystemConfig")),
			connect.WithClientOptions(opts...),
		),
		installOrUpdateSystem: connect.NewClient[api.InstallOrUpdateSystemRequest, api.InstallOrUpdateSystemReply](
			httpClient,
			baseURL+AdminInstallOrUpdateSystemProcedure,
			connect.WithSchema(adminMethods.ByName("InstallOrUpdateSystem")),
			connect.WithClientOptions(opts...),
		),
		deleteSystem: connect.NewClient[api.DeleteSystemRequest, api.DeleteSystemReply](
			httpClient,
			baseURL+AdminDeleteSystemProcedure,
			connect.WithSchema(adminMethods.ByName("DeleteSystem")),
			connect.WithClientOptions(opts...),
		),
		updateFeed: connect.NewClient[api.UpdateFeedRequest, api.UpdateFeedReply](
			httpClient,
			baseURL+AdminUpdateFeedProcedure,
			connect.WithSchema(adminMethods.ByName("UpdateFeed")),
			connect.WithClientOptions(opts...),
		),
		getSchedulerStatus: connect.NewClient[api.GetSchedulerStatusRequest, api.GetSchedulerStatusReply](
			httpClient,
			baseURL+AdminGetSchedulerStatusProcedure,
			connect.WithSchema(adminMethods.ByName("GetSchedulerStatus")),
			connect.WithClientOptions(opts...),
		),
		resetScheduler: connect.NewClient[api.ResetSchedulerRequest, api.ResetSchedulerReply](
			httpClient,
			baseURL+AdminResetSchedulerProcedure,
			connect.WithSchema(adminMethods.ByName("ResetScheduler")),
			connect.WithClientOptions(opts...),
		),
		getLogLevel: connect.NewClient[api.GetLogLevelRequest, api.GetLogLevelReply](
			httpClient,
			baseURL+AdminGetLogLevelProcedure,
			connect.WithSchema(adminMethods.ByName("GetLogLevel")),
			connect.WithClientOptions(opts...),
		),
		setLogLevel: connect.NewClient[api.SetLogLevelRequest, api.SetLogLevelReply](
			httpClient,
			baseURL+AdminSetLogLevelProcedure,
			connect.WithSchema(adminMethods.ByName("SetLogLevel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminClient implements AdminClient.
type adminClient struct {
	getSystemConfig       *connect.Client[api.GetSystemConfigRequest, api.SystemConfig]
	installOrUpdateSystem *connect.Client[api.InstallOrUpdateSystemRequest, api.InstallOrUpdateSystemReply]
	deleteSystem          *connect.Client[api.DeleteSystemRequest, api.DeleteSystemReply]
	updateFeed            *connect.Client[api.UpdateFeedRequest, api.UpdateFeedReply]
	getSchedulerStatus    *connect.Client[api.GetSchedulerStatusRequest, api.GetSchedulerStatusReply]
	resetScheduler        *connect.Client[api.ResetSchedulerRequest, api.ResetSchedulerReply]
	getLogLevel           *connect.Client[api.GetLogLevelRequest, api.GetLogLevelReply]
	setLogLevel           *connect.Client[api.SetLogLevelRequest, api.SetLogLevelReply]
}

// GetSystemConfig calls Admin.GetSystemConfig.
func (c *adminClient) GetSystemConfig(ctx context.Context, req *connect.Request[api.GetSystemConfigRequest]) (*connect.Response[api.SystemConfig], error) {
	return c.getSystemConfig.CallUnary(ctx, req)
}

// InstallOrUpdateSystem calls Admin.InstallOrUpdateSystem.
func (c *adminClient) InstallOrUpdateSystem(ctx context.Context, req *connect.Request[api.InstallOrUpdateSystemRequest]) (*connect.Response[api.InstallOrUpdateSystemReply], error) {
	return c.installOrUpdateSystem.CallUnary(ctx, req)
}

// DeleteSystem calls Admin.DeleteSystem.
func (c *adminClient) DeleteSystem(ctx context.Context, req *connect.Request[api.DeleteSystemRequest]) (*connect.Response[api.DeleteSystemReply], error) {
	return c.deleteSystem.CallUnary(ctx, req)
}

// UpdateFeed calls Admin.UpdateFeed.
func (c *adminClient) UpdateFeed(ctx context.Context, req *connect.Request[api.UpdateFeedRequest]) (*connect.Response[api.UpdateFeedReply], error) {
	return c.updateFeed.CallUnary(ctx, req)
}

// GetSchedulerStatus calls Admin.GetSchedulerStatus.
func (c *adminClient) GetSchedulerStatus(ctx context.Context, req *connect.Request[api.GetSchedulerStatusRequest]) (*connect.Response[api.GetSchedulerStatusReply], error) {
	return c.getSchedulerStatus.CallUnary(ctx, req)
}

// ResetScheduler calls Admin.ResetScheduler.
func (c *adminClient) ResetScheduler(ctx context.Context, req *connect.Request[api.ResetSchedulerRequest]) (*connect.Response[api.ResetSchedulerReply], error) {
	return c.resetScheduler.CallUnary(ctx, req)
}

// GetLogLevel calls Admin.GetLogLevel.
func (c *adminClient) GetLogLevel(ctx context.Context, req *connect.Request[api.GetLogLevelRequest]) (*connect.Response[api.GetLogLevelReply], error) {
	return c.getLogLevel.CallUnary(ctx, req)
}

// SetLogLevel calls Admin.SetLogLevel.
func (c *adminClient) SetLogLevel(ctx context.Context, req *connect.Request[api.SetLogLevelRequest]) (*connect.Response[api.SetLogLevelReply], error) {
	return c.setLogLevel.CallUnary(ctx, req)
}

// AdminHandler is an implementation of the Admin service.
type AdminHandler interface {
	// Get the config for a system
	//
	// `GET /systems/<system_id>/config`
	GetSystemConfig(context.Context, *connect.Request[api.GetSystemConfigRequest]) (*connect.Response[api.SystemConfig], error)
	// Install or update a system
	//
	// `PUT /systems/<system_id>`
	//
	// Installs or updates the system based on the configuration provided in the
	// request payload.
	// If the system does not exist an install is performed; otherwise the system is updated.
	//
	// This is an asynchronous operation.
	// The system configuration is validated before the request finishes
	// but database and feed updates are performed asynchronously. The status of the operation can
	// be determined by polling the [GetSystem endpoint](public_endpoints.md#get-system)
	// and inspecting the status field of the system.
	InstallOrUpdateSystem(context.Context, *connect.Request[api.InstallOrUpdateSystemRequest]) (*connect.Response[api.InstallOrUpdateSystemReply], error)
	// Delete a system
	//
	// `DELETE /systems/<system_id>`
	//
	// Deletes the specified system.
	DeleteSystem(context.Context, *connect.Request[api.DeleteSystemRequest]) (*connect.Response[api.DeleteSystemReply], error)
	// Update a feed
	//
	// `POST /systems/<system_id>/feeds/<feed_id>`
	//
	// Triggers a feed update for the specified feed.
	UpdateFeed(context.Context, *connect.Request[api.UpdateFeedRequest]) (*connect.Response[api.UpdateFeedReply], error)
	// Get scheduler status
	//
	// `GET /scheduler`
	//
	// Gets the status of the scheduler.
	GetSchedulerStatus(context.Context, *connect.Request[api.GetSchedulerStatusRequest]) (*connect.Response[api.GetSchedulerStatusReply], error)
	// Reset scheduler
	//
	// `POST /scheduler`
	//
	// Performs a full restart of the scheduler, with all scheduler
	//
	//	configurations retrieved fresh from the database.
	//
	// In general this endpoint should never be needed;
	//
	//	 Transiter automatically restarts the scheduler when needed.
	//	The main use-case is when the Postgres configuration is manually
	//	 updated and the scheduler needs to see the update.
	ResetScheduler(context.Context, *connect.Request[api.ResetSchedulerRequest]) (*connect.Response[api.ResetSchedulerReply], error)
	// Get the current log level.
	//
	// `GET /loglevel`
	GetLogLevel(context.Context, *connect.Request[api.GetLogLevelRequest]) (*connect.Response[api.GetLogLevelReply], error)
	// Set the log level.
	//
	// `PUT /loglevel`
	SetLogLevel(context.Context, *connect.Request[api.SetLogLevelRequest]) (*connect.Response[api.SetLogLevelReply], error)
}

// NewAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminHandler(svc AdminHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminMethods := api.File_api_admin_proto.Services().ByName("Admin").Methods()
	adminGetSystemConfigHandler := connect.NewUnaryHandler(
		AdminGetSystemConfigProcedure,
		svc.GetSystemConfig,
		connect.WithSchema(adminMethods.ByName("GetSystemConfig")),
		connect.WithHandlerOptions(opts...),
	)
	adminInstallOrUpdateSystemHandler := connect.NewUnaryHandler(
		AdminInstallOrUpdateSystemProcedure,
		svc.InstallOrUpdateSystem,
		connect.WithSchema(adminMethods.ByName("InstallOrUpdateSystem")),
		connect.WithHandlerOptions(opts...),
	)
	adminDeleteSystemHandler := connect.NewUnaryHandler(
		AdminDeleteSystemProcedure,
		svc.DeleteSystem,
		connect.WithSchema(adminMethods.ByName("DeleteSystem")),
		connect.WithHandlerOptions(opts...),
	)
	adminUpdateFeedHandler := connect.NewUnaryHandler(
		AdminUpdateFeedProcedure,
		svc.UpdateFeed,
		connect.WithSchema(adminMethods.ByName("UpdateFeed")),
		connect.WithHandlerOptions(opts...),
	)
	adminGetSchedulerStatusHandler := connect.NewUnaryHandler(
		AdminGetSchedulerStatusProcedure,
		svc.GetSchedulerStatus,
		connect.WithSchema(adminMethods.ByName("GetSchedulerStatus")),
		connect.WithHandlerOptions(opts...),
	)
	adminResetSchedulerHandler := connect.NewUnaryHandler(
		AdminResetSchedulerProcedure,
		svc.ResetScheduler,
		connect.WithSchema(adminMethods.ByName("ResetScheduler")),
		connect.WithHandlerOptions(opts...),
	)
	adminGetLogLevelHandler := connect.NewUnaryHandler(
		AdminGetLogLevelProcedure,
		svc.GetLogLevel,
		connect.WithSchema(adminMethods.ByName("GetLogLevel")),
		connect.WithHandlerOptions(opts...),
	)
	adminSetLogLevelHandler := connect.NewUnaryHandler(
		AdminSetLogLevelProcedure,
		svc.SetLogLevel,
		connect.WithSchema(adminMethods.ByName("SetLogLevel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/Admin/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminGetSystemConfigProcedure:
			adminGetSystemConfigHandler.ServeHTTP(w, r)
		case AdminInstallOrUpdateSystemProcedure:
			adminInstallOrUpdateSystemHandler.ServeHTTP(w, r)
		case AdminDeleteSystemProcedure:
			adminDeleteSystemHandler.ServeHTTP(w, r)
		case AdminUpdateFeedProcedure:
			adminUpdateFeedHandler.ServeHTTP(w, r)
		case AdminGetSchedulerStatusProcedure:
			adminGetSchedulerStatusHandler.ServeHTTP(w, r)
		case AdminResetSchedulerProcedure:
			adminResetSchedulerHandler.ServeHTTP(w, r)
		case AdminGetLogLevelProcedure:
			adminGetLogLevelHandler.ServeHTTP(w, r)
		case AdminSetLogLevelProcedure:
			adminSetLogLevelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminHandler struct{}

func (UnimplementedAdminHandler) GetSystemConfig(context.Context, *connect.Request[api.GetSystemConfigRequest]) (*connect.Response[api.SystemConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.GetSystemConfig is not implemented"))
}

func (UnimplementedAdminHandler) InstallOrUpdateSystem(context.Context, *connect.Request[api.InstallOrUpdateSystemRequest]) (*connect.Response[api.InstallOrUpdateSystemReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.InstallOrUpdateSystem is not implemented"))
}

func (UnimplementedAdminHandler) DeleteSystem(context.Context, *connect.Request[api.DeleteSystemRequest]) (*connect.Response[api.DeleteSystemReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.DeleteSystem is not implemented"))
}

func (UnimplementedAdminHandler) UpdateFeed(context.Context, *connect.Request[api.UpdateFeedRequest]) (*connect.Response[api.UpdateFeedReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.UpdateFeed is not implemented"))
}

func (UnimplementedAdminHandler) GetSchedulerStatus(context.Context, *connect.Request[api.GetSchedulerStatusRequest]) (*connect.Response[api.GetSchedulerStatusReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.GetSchedulerStatus is not implemented"))
}

func (UnimplementedAdminHandler) ResetScheduler(context.Context, *connect.Request[api.ResetSchedulerRequest]) (*connect.Response[api.ResetSchedulerReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.ResetScheduler is not implemented"))
}

func (UnimplementedAdminHandler) GetLogLevel(context.Context, *connect.Request[api.GetLogLevelRequest]) (*connect.Response[api.GetLogLevelReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.GetLogLevel is not implemented"))
}

func (UnimplementedAdminHandler) SetLogLevel(context.Context, *connect.Request[api.SetLogLevelRequest]) (*connect.Response[api.SetLogLevelReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Admin.SetLogLevel is not implemented"))
}
