// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servicemap_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteServiceMap = `-- name: DeleteServiceMap :exec
DELETE FROM service_map WHERE config_pk = $1 AND route_pk = $2
`

type DeleteServiceMapParams struct {
	ConfigPk int64
	RoutePk  int64
}

func (q *Queries) DeleteServiceMap(ctx context.Context, arg DeleteServiceMapParams) error {
	_, err := q.db.Exec(ctx, deleteServiceMap, arg.ConfigPk, arg.RoutePk)
	return err
}

const deleteServiceMapConfig = `-- name: DeleteServiceMapConfig :exec
DELETE FROM service_map_config WHERE pk = $1
`

func (q *Queries) DeleteServiceMapConfig(ctx context.Context, pk int64) error {
	_, err := q.db.Exec(ctx, deleteServiceMapConfig, pk)
	return err
}

const insertServiceMap = `-- name: InsertServiceMap :one
INSERT INTO service_map
    (config_pk, route_pk)
VALUES
    ($1, $2)
RETURNING pk
`

type InsertServiceMapParams struct {
	ConfigPk int64
	RoutePk  int64
}

func (q *Queries) InsertServiceMap(ctx context.Context, arg InsertServiceMapParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertServiceMap, arg.ConfigPk, arg.RoutePk)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

const insertServiceMapConfig = `-- name: InsertServiceMapConfig :exec
INSERT INTO service_map_config
    (id, system_pk, config)
VALUES
    ($1, $2, $3)
`

type InsertServiceMapConfigParams struct {
	ID       string
	SystemPk int64
	Config   []byte
}

func (q *Queries) InsertServiceMapConfig(ctx context.Context, arg InsertServiceMapConfigParams) error {
	_, err := q.db.Exec(ctx, insertServiceMapConfig, arg.ID, arg.SystemPk, arg.Config)
	return err
}

type InsertServiceMapStopParams struct {
	MapPk    int64
	StopPk   int64
	Position int32
}

const listServiceMapConfigsInSystem = `-- name: ListServiceMapConfigsInSystem :many
SELECT pk, id, system_pk, config FROM service_map_config WHERE system_pk = $1 ORDER BY id
`

func (q *Queries) ListServiceMapConfigsInSystem(ctx context.Context, systemPk int64) ([]ServiceMapConfig, error) {
	rows, err := q.db.Query(ctx, listServiceMapConfigsInSystem, systemPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceMapConfig
	for rows.Next() {
		var i ServiceMapConfig
		if err := rows.Scan(
			&i.Pk,
			&i.ID,
			&i.SystemPk,
			&i.Config,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceMapsConfigIDsForStops = `-- name: ListServiceMapsConfigIDsForStops :many
SELECT stop.pk, service_map_config.id
FROM service_map_config
    INNER JOIN stop ON service_map_config.system_pk = stop.system_pk
WHERE stop.pk = ANY($1::bigint[])
`

type ListServiceMapsConfigIDsForStopsRow struct {
	Pk int64
	ID string
}

func (q *Queries) ListServiceMapsConfigIDsForStops(ctx context.Context, stopPks []int64) ([]ListServiceMapsConfigIDsForStopsRow, error) {
	rows, err := q.db.Query(ctx, listServiceMapsConfigIDsForStops, stopPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceMapsConfigIDsForStopsRow
	for rows.Next() {
		var i ListServiceMapsConfigIDsForStopsRow
		if err := rows.Scan(&i.Pk, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceMapsForRoutes = `-- name: ListServiceMapsForRoutes :many
SELECT DISTINCT route.pk route_pk, service_map_config.id config_id, service_map_vertex.position, stop.id stop_id, stop.name stop_name
FROM service_map_config
  INNER JOIN system ON service_map_config.system_pk = system.pk
  INNER JOIN route ON route.system_pk = system.pk
  LEFT JOIN service_map ON service_map.config_pk = service_map_config.pk AND service_map.route_pk = route.pk
  LEFT JOIN service_map_vertex ON service_map_vertex.map_pk = service_map.pk
  LEFT JOIN stop ON stop.pk = service_map_vertex.stop_pk
WHERE route.pk = ANY($1::bigint[])
ORDER BY service_map_config.id, service_map_vertex.position
`

type ListServiceMapsForRoutesRow struct {
	RoutePk  int64
	ConfigID string
	Position pgtype.Int4
	StopID   pgtype.Text
	StopName pgtype.Text
}

// TODO: make this better?
func (q *Queries) ListServiceMapsForRoutes(ctx context.Context, routePks []int64) ([]ListServiceMapsForRoutesRow, error) {
	rows, err := q.db.Query(ctx, listServiceMapsForRoutes, routePks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceMapsForRoutesRow
	for rows.Next() {
		var i ListServiceMapsForRoutesRow
		if err := rows.Scan(
			&i.RoutePk,
			&i.ConfigID,
			&i.Position,
			&i.StopID,
			&i.StopName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceMapsForStops = `-- name: ListServiceMapsForStops :many
SELECT stop.pk stop_pk, service_map_config.id config_id, service_map.route_pk route_pk
FROM stop
  INNER JOIN service_map_vertex vertex ON vertex.stop_pk = stop.pk
  INNER JOIN service_map ON service_map.pk = vertex.map_pk
  INNER JOIN service_map_config ON service_map_config.pk = service_map.config_pk
WHERE stop.pk = ANY($1::bigint[])
`

type ListServiceMapsForStopsRow struct {
	StopPk   int64
	ConfigID string
	RoutePk  int64
}

func (q *Queries) ListServiceMapsForStops(ctx context.Context, stopPks []int64) ([]ListServiceMapsForStopsRow, error) {
	rows, err := q.db.Query(ctx, listServiceMapsForStops, stopPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceMapsForStopsRow
	for rows.Next() {
		var i ListServiceMapsForStopsRow
		if err := rows.Scan(&i.StopPk, &i.ConfigID, &i.RoutePk); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStopPksForRealtimeMap = `-- name: ListStopPksForRealtimeMap :many
SELECT trip.pk trip_pk, trip.direction_id, trip_stop_time.stop_pk
FROM trip
INNER JOIN trip_stop_time on trip_stop_time.trip_pk = trip.pk
WHERE trip.route_pk = $1
AND trip.direction_id IS NOT NULL
AND trip_stop_time.past IS FALSE
ORDER BY trip.pk, trip_stop_time.stop_sequence
`

type ListStopPksForRealtimeMapRow struct {
	TripPk      int64
	DirectionID pgtype.Bool
	StopPk      int64
}

func (q *Queries) ListStopPksForRealtimeMap(ctx context.Context, routePk int64) ([]ListStopPksForRealtimeMapRow, error) {
	rows, err := q.db.Query(ctx, listStopPksForRealtimeMap, routePk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStopPksForRealtimeMapRow
	for rows.Next() {
		var i ListStopPksForRealtimeMapRow
		if err := rows.Scan(&i.TripPk, &i.DirectionID, &i.StopPk); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceMapConfig = `-- name: UpdateServiceMapConfig :exec
UPDATE service_map_config
SET config = $1
WHERE pk = $2
`

type UpdateServiceMapConfigParams struct {
	Config []byte
	Pk     int64
}

func (q *Queries) UpdateServiceMapConfig(ctx context.Context, arg UpdateServiceMapConfigParams) error {
	_, err := q.db.Exec(ctx, updateServiceMapConfig, arg.Config, arg.Pk)
	return err
}
