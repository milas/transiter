// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTransfers = `-- name: DeleteTransfers :exec
DELETE FROM transfer
WHERE transfer.feed_pk = $1
`

func (q *Queries) DeleteTransfers(ctx context.Context, feedPk int64) error {
	_, err := q.db.Exec(ctx, deleteTransfers, feedPk)
	return err
}

const getTransfer = `-- name: GetTransfer :one
SELECT transfer.pk, transfer.system_pk, transfer.from_stop_pk, transfer.to_stop_pk, transfer.type, transfer.min_transfer_time, transfer.feed_pk, transfer.id FROM transfer
    INNER JOIN system ON transfer.system_pk = system.pk
    WHERE system.id = $1
    AND transfer.id = $2
`

type GetTransferParams struct {
	SystemID   string
	TransferID string
}

func (q *Queries) GetTransfer(ctx context.Context, arg GetTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, arg.SystemID, arg.TransferID)
	var i Transfer
	err := row.Scan(
		&i.Pk,
		&i.SystemPk,
		&i.FromStopPk,
		&i.ToStopPk,
		&i.Type,
		&i.MinTransferTime,
		&i.FeedPk,
		&i.ID,
	)
	return i, err
}

const insertTransfer = `-- name: InsertTransfer :exec
INSERT INTO transfer
    (id, system_pk, feed_pk, from_stop_pk, to_stop_pk,
     type, min_transfer_time)
VALUES
    ($1, $2, $3,
     $4, $5, $6,
     $7)
`

type InsertTransferParams struct {
	ID              string
	SystemPk        int64
	FeedPk          int64
	FromStopPk      int64
	ToStopPk        int64
	Type            string
	MinTransferTime pgtype.Int4
}

func (q *Queries) InsertTransfer(ctx context.Context, arg InsertTransferParams) error {
	_, err := q.db.Exec(ctx, insertTransfer,
		arg.ID,
		arg.SystemPk,
		arg.FeedPk,
		arg.FromStopPk,
		arg.ToStopPk,
		arg.Type,
		arg.MinTransferTime,
	)
	return err
}

const listTransfersFromStops = `-- name: ListTransfersFromStops :many
  SELECT transfer.pk, transfer.system_pk, transfer.from_stop_pk, transfer.to_stop_pk, transfer.type, transfer.min_transfer_time, transfer.feed_pk, transfer.id
  FROM transfer
  WHERE transfer.from_stop_pk = ANY($1::bigint[])
  ORDER BY transfer.id
`

func (q *Queries) ListTransfersFromStops(ctx context.Context, fromStopPks []int64) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersFromStops, fromStopPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.Pk,
			&i.SystemPk,
			&i.FromStopPk,
			&i.ToStopPk,
			&i.Type,
			&i.MinTransferTime,
			&i.FeedPk,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersInSystem = `-- name: ListTransfersInSystem :many
SELECT transfer.pk, transfer.system_pk, transfer.from_stop_pk, transfer.to_stop_pk, transfer.type, transfer.min_transfer_time, transfer.feed_pk, transfer.id FROM transfer
WHERE transfer.system_pk = $1
ORDER BY transfer.id
`

func (q *Queries) ListTransfersInSystem(ctx context.Context, systemPk int64) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersInSystem, systemPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.Pk,
			&i.SystemPk,
			&i.FromStopPk,
			&i.ToStopPk,
			&i.Type,
			&i.MinTransferTime,
			&i.FeedPk,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
